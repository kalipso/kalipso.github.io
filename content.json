{"meta":{"title":"낭만디비술사","subtitle":null,"description":null,"author":"kalipso","url":"https://kalipso.github.io"},"pages":[],"posts":[{"title":"Apache Kudu의 특징과 테이블 관리","slug":"About-Apache-Kudu","date":"2017-11-09T08:20:21.000Z","updated":"2017-11-09T08:21:43.122Z","comments":true,"path":"2017/11/09/About-Apache-Kudu/","link":"","permalink":"https://kalipso.github.io/2017/11/09/About-Apache-Kudu/","excerpt":"","text":"프로젝트에서 Kudu를 쓸 기회가 생겨서 간단하게 특징을 정리해보기로 하겠습니다. Cloudera 위에서 Kudu-Impala를 약간 써본 관계로, 전체적인 내용보다는 특징적인 부분만을 정리해보려고 합니다. # Kudu의 특징 Apache Hadoop 플랫폼 환경에서 사용되는 Columnar 스토리지 엔진이다. 데이터웨어하우징 워크로드에서 유리함 MapReduce, Spark 및 기타 Hadoop ecosystem 컴포넌트와 통합된다. 엄격한 직렬화 일관성을 포함하여 일관성 유지를 위한 다양한 옵션을 제공한다. Raft Consensus 알고리즘을 사용하여 높은 가용성을 유지한다. 반수 이상의 Replica가 Available하다면 Tablet Server는 Read/Write를 수행할 수 있다. 구조화된 모델(Structured Data Model) # Kudu의 구조 Table : 데이터가 저장되는 공간. Table은 Schema 정렬된 Primary Key를 가진다. Table은 Tablet이라는 세그먼트로 분할된다. Tablet : Table의 연속 세그먼트. Tablet은 여러 Tablet Server에 ReplicaSet를 구성함 Tablet Server : Tablet을 저장하고 클라이언트에 저장하는 역할을 한다. Raft Consensus 알고리즘을 사용하여 리더를 선출하고 읽기 혹은 쓰기 요청을 처리한다. Master : Tablet, Tablet Server, Catalog Table 및 클러스터와 관련한 Metadata를 가진다. 현재 Leader가 사라지면 Raft Consensus 알고리즘을 이용하여 새로운 Master가 선출된다.또한 Master는 새로운 Table에 대한 metadata를 Catalog Table에 쓰거나 Tablet Server들에 Tablet을 생성하는 프로세스를 조정하는 등의 metadata 오퍼레이션을 수행한다. Table Server들은 셋팅된 Interval에 따라 Master에 heartbeat를 전송한다. # Kudu-Impala 테이블 생성Internal &amp; External Impala Table Internal : Impala에 의해 관리되며 Impala에서 삭제하면 데이터와 테이블이 완전 삭제됨. Impala를 사용하여 새 테이블을 만들면 일반적으로 내부 테이블 External : Create External Table로 생성할 수 있으며 테이블을 삭제해도 Kudu에서 테이블이 삭제되지 않고, Impala와 Kudu 간 매핑만 제거함. Kudu API 또는 Apache Spark 등에서 만들었을 경우 Impala에서 자동으로 표시되지 않기 때문에, 먼저 Impala에서 External 테이블을 만들어 Kudu 테이블과 Impala 데이터베이스를 매핑해야 함. 12345CREATE EXTERNAL TABLE my_mapping_tableSTORED AS KUDUTBLPROPERTIES ( 'kudu.table_name' = 'my_kudu_table'); Impala에서 새로운 Kudu 테이블 만들기 테이블 생성 12345678910111213141516--일반적인 생성구문CREATE TABLE my_first_table( id BIGINT, name STRING, PRIMARY KEY(id))PARTITION BY HASH PARTITIONS 16STORED AS KUDU;-- CTASCREATE TABLE new_tablePRIMARY KEY (ts, name)PARTITION BY HASH(name) PARTITIONS 8STORED AS KUDUAS SELECT ts, name, value FROM old_table; ※ Kudu는 현재 (2017.11) 자동/수동 Sharding 매커니즘이 없기 때문에, 테이블을 만들 때 partition by 절을 이용하여 분할 Key를 지정해야 한다. ​ 파티션 설정 PARTITION BY RANGE : 범위 파티션을 지정할 수 있으며, 아래와 같이 사용함. 1234567891011121314151617181920212223242526CREATE TABLE cust_behavior ( _id BIGINT PRIMARY KEY, salary STRING, edu_level INT, usergender STRING, `group` STRING, city STRING, postcode STRING, last_purchase_price FLOAT, last_purchase_date BIGINT, category STRING, sku STRING, rating INT, fulfilled_date BIGINT)PARTITION BY RANGE (_id)( PARTITION VALUES &lt; 1439560049342, PARTITION 1439560049342 &lt;= VALUES &lt; 1439566253755, PARTITION 1439566253755 &lt;= VALUES &lt; 1439572458168, PARTITION 1439572458168 &lt;= VALUES &lt; 1439578662581, PARTITION 1439578662581 &lt;= VALUES &lt; 1439584866994, PARTITION 1439584866994 &lt;= VALUES &lt; 1439591071407, PARTITION 1439591071407 &lt;= VALUES)STORED AS KUDU; PARTITION BY HASH : HASH 값으로 파티셔닝하며, column을 지정하지 않으면 모든 기본 키 열을 해싱하여 원하는 수의 버킷을 생성할 수 있다. 값이 단조롭게 증가하는 열에서 범위별로 파티션을 나누면 마지막 Tablet이 다른 테이블보다 훨씬 커지므로 주의할 것. PARTITION BY HASH and RANGE : 다음과 같은 형태로 복합 파티션 키를 설정할 수 있음. 12345678910111213141516171819202122232425CREATE TABLE cust_behavior ( id BIGINT, sku STRING, salary STRING, edu_level INT, usergender STRING, `group` STRING, city STRING, postcode STRING, last_purchase_price FLOAT, last_purchase_date BIGINT, category STRING, rating INT, fulfilled_date BIGINT, PRIMARY KEY (id, sku))PARTITION BY HASH (id) PARTITIONS 4,RANGE (sku)( PARTITION VALUES &lt; 'g', PARTITION 'g' &lt;= VALUES &lt; 'o', PARTITION 'o' &lt;= VALUES &lt; 'u', PARTITION 'u' &lt;= VALUES)STORED AS KUDU; Non-Covering Range Partitions : Kudu 1.0 이상에서 다음과 같은 Range 파티션을 만들 수 있다. 123456789101112CREATE TABLE sales_by_year ( year INT, sale_id INT, amount INT, PRIMARY KEY (sale_id, year))PARTITION BY RANGE (year) ( PARTITION VALUE = 2012, PARTITION VALUE = 2013, PARTITION VALUE = 2014, PARTITION VALUE = 2015, PARTITION VALUE = 2016)STORED AS KUDU; 이 테이블은 2017이 되면 입력이 거부되기 때문에, 다음과 같이 range가 추가되어야 한다. 1ALTER TABLE sales_by_year ADD RANGE PARTITION VALUE = 2017; 마찬가지로, range partition은 drop될 수 있다. 1ALTER TABLE sales_by_year ADD RANGE PARTITION VALUE = 2017; 테이블 속성 변경 Internal 테이블인 경우, kudu.table_name속성을 변경하여 기본 Kudu 테이블 이름 변경 12ALTER TABLE my_internal_tableSET TBLPROPERTIES('kudu.table_name' = 'new_name') 다른 응용 프로그램이 Impala에서 Kudu 테이블의 이름을 바꾼 경우 외부 테이블 다시 매핑 12ALTER TABLE my_external_table_SET TBLPROPERTIES('kudu.table_name' = 'some_other_kudu_table') Kudu Master 주소 변경 12ALTER TABLE my_tableSET TBLPROPERTIES('kudu.master_addresses' = 'kudu-new-master.example.com:7051'); Internal -&gt; External로 변경 1ALTER TABLE my_table SET TBLPROPERTIES('EXTERNAL' = 'TRUE'); ​## 참고 Introducing Apache Kudu(https://kudu.apache.org/docs/)","categories":[{"name":"Database","slug":"Database","permalink":"https://kalipso.github.io/categories/Database/"},{"name":"kudu","slug":"Database/kudu","permalink":"https://kalipso.github.io/categories/Database/kudu/"}],"tags":[{"name":"kudu","slug":"kudu","permalink":"https://kalipso.github.io/tags/kudu/"},{"name":"hadoop","slug":"hadoop","permalink":"https://kalipso.github.io/tags/hadoop/"},{"name":"kudu-impala","slug":"kudu-impala","permalink":"https://kalipso.github.io/tags/kudu-impala/"},{"name":"kudu partition","slug":"kudu-partition","permalink":"https://kalipso.github.io/tags/kudu-partition/"}]},{"title":"Github Page에 Hexo 블로그 만들기","slug":"how-to-make-hexo-blog-on-github-page","date":"2017-11-08T08:02:10.000Z","updated":"2017-11-08T14:02:15.785Z","comments":true,"path":"2017/11/08/how-to-make-hexo-blog-on-github-page/","link":"","permalink":"https://kalipso.github.io/2017/11/08/how-to-make-hexo-blog-on-github-page/","excerpt":"","text":"프롤로그올해 여름, 11개월 프로젝트를 마치고 나와서 오랜만에 티스토리 블로그를 접속했더니 접속이 되지 않았습니다. 다음 고객센터를 페이지를 통해서 티스토리 담당자랑 한참 실갱이를 했는데, 누군가 해킹을 해서 내 블로그와 글을 모두 삭제하였고, 해당 블로그는 결국 살릴 수 없다고 합니다. 쿠궁 ㅠㅠ 가끔씩 써오기는 했지만 나름 10년을 써왔던 블로그인데 한순간에 날아가버린 거죠.. 이렇게 허무할 수가.. 눈물을 머금고 블로그 선택에 대한 포스팅(내 글을 오래 남기기 위한 블로그 선택)들을 찾아보다가 GitHub Page에서 Hexo를 이용해 블로그를 구축하는 방법을 선택하였는데, 선택의 주된 이유를 정리해보면 이렇습니다. 변경 자유도가 높다. 보안 및 컨텐츠 유실로부터 비교적 안전하다. web환경에서 로그인 및 권한획득 과정이 없음. 기본적으로 PC에서 소스를 관리함. GitHub를 통해 버전 관리가 가능함. 모든 기능을 제한없이 무료로 사용할 수 있다. Jekyll과 Hexo를 비교한 결과, Hexo가 더 예쁘다. A fast, simple &amp; powerful blog framework 약간의 삽질을 통해 Hexo 블로그를 만들게 되었는데, 그 과정을 아래에 기록합니다. # GitHub으로 정적 페이지 생성하기GitHub에서는 Repository를 생성하여 정적 페이지를 서비스할 수 있는 기능을 제공합니다. 1. Repository 생성GitHub에서 “New Repository” 선택 후 Repository Name, Description 등 입력하고 Repository을 생성합니다. ※ Add License 등 옵션은 선택하지 않음 2. Clone then Repository1234#1. Repository를 \"pub\"저장소로 cloned:\\blog&gt; git clone https://github.com/username/username.github.io.git pubCloning into 'pub'...warning: You appear to have cloned an empty repository. 3. Hello world 서비스 테스트12345678#2. index.html 생성d:\\blog&gt; cd pubd:\\blog\\pub&gt; echo \"Hello World\" &gt; index.html#. Remote 저장소에 변경내역 Pushd:\\blog\\pub&gt; git add --alld:\\blog\\pub&gt; git commit -m \"Initial commit\"d:\\blog\\pub&gt; git push -u origin maser 4. 접속확인페이지 접속 확인 브라우저에서 Repository name으로 접속하여 접속 확인※ 위에서 pub 폴더는 서비스용이 아니고 테스트 용도입니다. # Hexo 설치1. 사전설치설치 전 준비 Hexo를 이용하기 위해서는 다음 구성요소들이 사전에 설치되어 있어야 합니다. Node.js Git 2. Hexo Client 및 저장소 설정npm을 이용하여 Hexo Client를 설치하고 저장소를 설정합니다. 1234567#1. hexo client 설치D:\\blog&gt; npm install hexo-cli-g#2. hexo 저장소 생성 및 설치D:\\blog&gt; hexo init srcD:\\blog&gt; cd srcD:\\blog\\src&gt; npm install 3. _config.yml 파일 설정hexo의 기본정보를 셋팅합니다. “Plugins”의 첫번째 문자가 대문자임에 유의하세요. (저처럼 3일 동안 삽질할 수 있습니다) 12345678910111213141516171819202122# Site# language를 ko로 만들면 Home &gt; 홈으로 나오는 등의 부작용title: 낭만디비술사subtitle:description:author: kalipsolanguage: entimezone: Asia/Seoul... 중략 ...## Plugins: https://hexo.io/plugins/Plugins:- hexo-deployer-git... 중략 ...# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: https://github.com/username/username.github.io.git 4. Hexo 로컬 서버에서 확인로컬 서버를 만들고 확인할 수 있습니다. 기본적으로 로컬 페이지는 포트 4000입니다.12345# server 설치D:\\blog\\src&gt;npm install hexo-server --save# 서버 구동D:\\blog\\src&gt;hexo server http://localhost:4000 에서 확인 가능 5. GitHub에 Deploy아래에서 hexo-deployer-git은 _config.yml에 정의되어 있기 때문에, server를 구동하기 전에 먼저 설치되어야 합니다.아래 명령을 통해 간단하게 Github에 Deploy할 수 있습니다.12345# deployer 설치D:\\blog\\src&gt;npm install hexo-deployer-git --save# generate 및 github-deployD:\\blog\\src&gt;hexo deploy --generate http://username.github.io 에 deploy 완료. # Theme 적용하기https://hexo.io/themes/ 에 접속해서 Hexo에서 사용할 수 있는 여러가지 Theme를 확인하고 선택할 수 있습니다.저는 많은 블로그들이 사용하고 있는 hueman(https://github.com/ppoffice/hexo-theme-hueman/wiki/Installation) 을 사용했습니다. (중국어로 된 테마도 많은데, 언어 문제로 포기..) 대부분의 Theme가 sample 페이지와 Installation 문서를 포함한 Github 페이지를 제공하고 있기 때문에 설치가 어렵지 않습니다.다만, 로컬에서 Server 재시작에도 변경사항이 제대로 반영되지 않을때, clean 명령을 통해 저장소를 초기화할 수 있습니다. 12D:\\blog\\src&gt; hexo cleanD:\\blog\\src&gt; hexo server # 백업 설정Jekyll과 달리 Hexo는 각 변경사항이 모두 Git으로 버전관리가 되지 않기 때문에, 유실에 대비하여 GitHub에 Repository(https://github.com/username/blog-source.git) 를 만들고 관리하는 것으로 설정하였다. 1. Hexo 저장소 git에 관리123456# git 저장소로 만들고 커밋D:\\blog\\src&gt; git initD:\\blog\\src&gt; git add --allD:\\blog\\src&gt; git commit -m \"initial commit\"D:\\blog\\src&gt; git remote add origin https://github.com/username/blog-source.gitD:\\blog\\src&gt; git push origin master 2. 배치파일 생성반영시마다 Hexo 저장소를 commit하고 반영하는 배치파일 생성12345678910# hexoCommit.bat 파일 생성D:\\blog\\src&gt; copy con hexoCommit.batcd D:\\blog\\srcgit add --allgit commit -m \"블로그 소스 반영(%date%)\"git push -u origin masterhexo deploy --generate# Ctrl + Z (저장) 참고 Github Pages와 Hexo를 통해 30분만에 기술 블로그 만들기(https://www.holaxprogramming.com/2017/04/16/github-page-and-hexo/) 워드프레스보다 쉬운 Hexo 블로그 시작하기(http://futurecreator.github.io/2016/06/14/get-started-with-hexo/)","categories":[{"name":"Application","slug":"Application","permalink":"https://kalipso.github.io/categories/Application/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://kalipso.github.io/tags/hexo/"},{"name":"블로그 만들기","slug":"블로그-만들기","permalink":"https://kalipso.github.io/tags/블로그-만들기/"},{"name":"github","slug":"github","permalink":"https://kalipso.github.io/tags/github/"}]}]}