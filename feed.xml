<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>낭만디비술사</title>
  
  
  <link href="/feed.xml" rel="self"/>
  
  <link href="https://kalipso.github.io/"/>
  <updated>2018-01-22T17:38:55.395Z</updated>
  <id>https://kalipso.github.io/</id>
  
  <author>
    <name>kalipso</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2018년, 신문 구독하기</title>
    <link href="https://kalipso.github.io/2018/01/23/start-newspaper-subscription/"/>
    <id>https://kalipso.github.io/2018/01/23/start-newspaper-subscription/</id>
    <published>2018-01-22T17:37:22.000Z</published>
    <updated>2018-01-22T17:38:55.395Z</updated>
    
    <content type="html"><![CDATA[<p>연말연시를 맞아 세운 계획 중의 하나가 “신문 구독”이었다. </p><p>요즘이야 모든 신문사들이 컨텐츠를 온라인으로 서비스하기는 하지만, 스마트폰으로 기사를 보다보면 흥미가 가는 기사만 골라서 클릭하게 되거나, 금새 쇼핑이나 SNS, 게임 알람 등에 시선을 빼앗기게 되어 “읽는 즐거움”으로 몰입하기가 힘들다.  신문 기사의 행간을 떠다니며 가독성을 저해하는 각종 광고는 또 어떤가. </p><p>TV뉴스는 사정에 따라 못보게 되는 경우도 많고, 시간의 제약으로 인해 주제의 다양성이나 깊이, 혹은 모두에서 부족하다는 느낌을 받았다. 거의 유일한 예외가 손석희 님이 진행하는 JTBC 뉴스룸 정도랄까? </p><p>마침 이사도 했고, 와이프와 함께 어떤 신문을 볼지 고민을 시작했다.</p><h3 id="어떤-신문을-볼까"><a href="#어떤-신문을-볼까" class="headerlink" title="어떤 신문을 볼까"></a>어떤 신문을 볼까</h3><p>조중동은 제껴두고 판단했다. 조선, 중앙, 동아일보는 워낙 보수적이고 친 자본적이어서, 좀처럼 친밀감을 가질 수 없다. 경향신문을 볼지 한겨례를 볼지, 그리고 부동산이나 경제 흐름에 대한 시야를 넓혀줄 경제신문을 하나 더 보고 싶은데 어떤 신문을 봐야하는지가 고민이었다. </p><p>어떤 신문을 선택할지 결정하기 위해서는 우선 실물을 보는게 가장 확실하다고 생각하는데, 기사 각각의 내용 뿐만 아니라 기사를 어디에 어떤 비중으로, 어떤 타이틀로 배치했는지가 그 신문의 지향을 표현한다고 보기 때문이다.  그러나 신문을 찾아보는 것도 쉬운 일이 아니었다. 당연히 지하철역에 가면 신문 판매하는 곳이 있을 줄 알았는데, 정자역 어디에도 신문 판매하는 곳이 없었다. 지하철 편의점에서 신문을 살수 없다는 것이 이상해서 동네의 가장 큰 편의점을 가봤지만, 역시 신문을 판매하지 않았다. </p><p>그러고보니 요즘에는 지하철 선반에 가득 올려져있던 신문도 볼 수가 없구나. 특히나 무가지(無價紙)가 유행하던 시절에는 지하철에 선반마다 신문이 가득했었는데… 바야흐로, 길거리에서 신문이 없어지는 시대가 온 것이다. </p><p><img src="https://farm5.staticflickr.com/4624/39775043162_8ccdbcfcdc_o.png" alt="지하철에 가득 올려져있던 무가지들. 2005년 12월 조선일보 기사"></p><p>고민을 하던 중 도서관에서 여러 종류의 신문을 볼 수 있다는게 떠올라서, 주말에 아내와 함께  도서관을 방문했다. 역시 각종 신문이 보관되어 있고, 신문을 펼쳐놓고 볼 수 있는 책상도 제공한다. 역시 도서관 최고~^^</p><p> 우선 경향신문과 한겨례를 비교하고, 한국경제와 매일경제를 비교했다. 경향신문과 한겨례 중 경향신문을 선택하는데는 이견이 없었다. 경향신문의 구성과 서체가 좀 더 가시적이었고, 기사의 논조도 더 객관적이라는 느낌을 주었다. 물론 개인의 취향일 뿐이지만. 다만 경제지는 의견이 엇갈렸다. 정치적 논조는 둘다 크게 다를 바 없었다. 중도보다는 보수에 가깝고 재계의 입장을 반영하는. 다만 구성과 디자인 면에서 한국경제가 더 낫다고 생각했는데, 아내는 매일경제가 더 읽기 편하다고 했다. </p><p>우리는 우선 경향신문을 보고, 경제신문은 나중에 다시 생각해보기로 결정했다. </p><h3 id="신문-구독-신청"><a href="#신문-구독-신청" class="headerlink" title="신문 구독 신청"></a>신문 구독 신청</h3><p>마침 멀지 않은 곳에 신문 지국이 있었다. 전화를 걸어서 조건을 물어보니 3개월을 무료로 넣어주고 이후에는 한달 구독료가 18,000원이라고 한다. 조중동은 6개월 무료로 넣어주고 한달에 15,000원이라고 하던데.. 약간 비싼 감이 없지 않지만 어쩌겠는가. 두 신문의 발행 부수 차이는 엄청나다. </p><p>“뭐 서비스로 주시는 건 없나요?”라고 묻자</p><p>“조선일보처럼 사은품 끼워드리는 건 없구요, 대신 한국경제 서비스로 드릴께요.”</p><p>와.. 이런..개이득ㅋㅋ 망설일 이유가 없었다. 다음날부터 바로 가져다 달라고 부탁했다. 그렇게 나는 2018년 새해 첫날, 신문을 받아볼 수 있었다.</p><h3 id="신문-구독-후기"><a href="#신문-구독-후기" class="headerlink" title="신문 구독 후기"></a>신문 구독 후기</h3><p><img src="https://farm5.staticflickr.com/4718/25919439778_58e9510c6b_o.jpg" alt="토요일자 경향신문과 한국경제"></p><p>신문은 일요일을 제외하고 매일 온다.  와이프와 함께 다양한 정보를 접할 수 있도록, 출근할 때에는 신문 종류를 바꿔가면서 가져간다. 월수금은 내가 경향신문, 화목토는 내가 한국경제 이런식이다. </p><p>요즘은 워낙 신문을 읽는 사람이 많지 않아서, 출근길에 신문을 들고 있는 것은 뭔가 괴짜스럽기까지 한 것은 사실이다. 사람들 사이에서 신문을 접고 펴고 하는 것도 살짝 불편하다. 그럼에도 정치, 경제, 사회, 문화, 책과 스포츠까지, 다양한 분야의 따끈한 소식을 매일 아침 접하는 것은 참 기분좋은 일인 것 같다. </p><p>이런 뿌듯함을 한달 18,000원에 산다는건 아깝지 않다. 새벽 3~4시부터 신문을 준비하고 배달하시는 분의 수고를 생각하면 더더욱 그렇고 말이다. </p><p>디지털 컨텐츠 범람의 시대. 잉크 냄새가 아릿한, 신문 보기를 추천한다. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;연말연시를 맞아 세운 계획 중의 하나가 “신문 구독”이었다. &lt;/p&gt;
&lt;p&gt;요즘이야 모든 신문사들이 컨텐츠를 온라인으로 서비스하기는 하지만, 스마트폰으로 기사를 보다보면 흥미가 가는 기사만 골라서 클릭하게 되거나, 금새 쇼핑이나 SNS, 게임 알
      
    
    </summary>
    
      <category term="Diary" scheme="https://kalipso.github.io/categories/Diary/"/>
    
      <category term="일상/여행" scheme="https://kalipso.github.io/categories/Diary/%EC%9D%BC%EC%83%81-%EC%97%AC%ED%96%89/"/>
    
    
      <category term="신문구독" scheme="https://kalipso.github.io/tags/%EC%8B%A0%EB%AC%B8%EA%B5%AC%EB%8F%85/"/>
    
      <category term="어떤신문을볼까" scheme="https://kalipso.github.io/tags/%EC%96%B4%EB%96%A4%EC%8B%A0%EB%AC%B8%EC%9D%84%EB%B3%BC%EA%B9%8C/"/>
    
      <category term="경향신문구독" scheme="https://kalipso.github.io/tags/%EA%B2%BD%ED%96%A5%EC%8B%A0%EB%AC%B8%EA%B5%AC%EB%8F%85/"/>
    
      <category term="한국경제구독" scheme="https://kalipso.github.io/tags/%ED%95%9C%EA%B5%AD%EA%B2%BD%EC%A0%9C%EA%B5%AC%EB%8F%85/"/>
    
  </entry>
  
  <entry>
    <title>［태교일기］ 임신 23주 4일</title>
    <link href="https://kalipso.github.io/2018/01/08/papa-diary-pregnant-23w/"/>
    <id>https://kalipso.github.io/2018/01/08/papa-diary-pregnant-23w/</id>
    <published>2018-01-07T16:46:13.000Z</published>
    <updated>2018-01-07T16:49:28.720Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2018-01-07-일"><a href="#2018-01-07-일" class="headerlink" title="2018.01.07(일)"></a>2018.01.07(일)</h2><p>해가 바뀌어 황금개 띠의 해가 밝았다. 안팎으로 느낌이 좋은 새해다. 정치도 안정적으로 제자리를 찾아가고 있으며(<a href="http://news.khan.co.kr/kh_news/khan_art_view.html?artid=201801050600085&amp;code=910100" target="_blank" rel="external">문재인 정부와 이낙연 총리</a> 이하 다방면으로 잘하고 있는 것 같다), 미국 증시를 비롯해 세계 경제가 호조세를 보이면서 우리나라 경제도 3% 이상 성장할 것으로 예상되고 있다. 북미관계의 긴장감과 군사적 위협이 상당히 높았지만, 김정은 신년사와 평창 동계올림픽을 통해  해빙무드가 조성되고 있는 것으로 보인다. </p><p>작년보다 나은 한해가 될 것이라는 생각이 든게 참 오랜만(혹은 처음)인데, 이게 똥글이 때문인지 아니면 제반 환경의 영향인지 잘 모르겠다. 여하튼 희망이 있다는 것은 좋다. 모두가, 행복한 새해가 되었으면 좋겠다. </p><h2 id="태동"><a href="#태동" class="headerlink" title="태동"></a>태동</h2><p>똥글이두 아빠와 공감하고 있는 것 인지, 별탈 없이 잘 크고 있는 것 같다. </p><p><img src="https://farm5.staticflickr.com/4693/25682821708_7f71c9f926_z.jpg" alt="23주에 접어든 아내의 배. 19주와 비교해보니 꽤 커진 듯~"></p><p>18~20주에는 태동이 약한 듯 해서 살짝 걱정을 했는데, 지난 12/18 아내가 병원에 가서 아기가 아주 잘 놀고 있다는 말을 들은 후로는 정말로 잘 놀기 시작했다.</p><p>패턴을 보면 꽤 다채로운 행동을 하는데, 아내의 말에 따르면 꾸물텅꾸물텅 움직이기도 하고, 뻥 차기도 하고, 뽀글뽀글 하기도 한단다. 대부분은 내가 직접 느끼지는 못하지만, 지난번에는 동화책을 읽어주다가 귀를 가만히 대고 있었는데 뻥 차서 확실히 느낄 수 있었다. 특히 밥 때가 되거나 뭘 먹거나 할 때 더 활발해진다고. 고작 뭔가를 먹이고 움직이는 것 정도이지만, <strong>우리는 커뮤니케이션을 시작</strong>한 것이다. </p><h2 id="태교-동화"><a href="#태교-동화" class="headerlink" title="태교 동화"></a>태교 동화</h2><p>임신 17~20주가 되면 청각 기관이 발달하고 태아가 엄마의 내장 기관과 외부 세상의 소리를 들을 수 있다고 한다. 물론 정말 듣고 반응하려면 6개월 이상이 되어야 한다고는 하지만. 아빠 욕심에 15주 정도부터 태교 동화를 들려주기 시작했다. 중고OO에서 죽전에 사는 애기 엄마한테 2권 만오천원에 구입^^ </p><p><img src="https://farm5.staticflickr.com/4730/38657043865_85a174e527.jpg" alt="14주에 구입한 태교동화 &#39;하루 5분 아빠 목소리&#39;와 &#39;하루 5분 엄마 목소리&#39;"></p><p>태교 동화는 어떤 내용일까, 너무 재미없어서 공감이 안되지 않을까라고 생각했는데 걱정할 필요는 없었다. <strong>하루 5분 엄마 목소리</strong>는 &lt;태교 동화를 읽는 시간, 사랑을 배우는 아이&gt;, <strong>하루 5분 아빠 목소리</strong>는 &lt;태교 동화를 읽는 시간, 지혜를 배우는 아이&gt;라는 부제를 달고 있는데, 우리가 공감이 가는 부분이 많아서 감정이입하는데 어려움이 없었다. 보통 2개 챕터 정도(5~7쪽 분량)를 읽어주고 마치는데, 와이프가 한참 재미있을 때 그만 읽어서 알쓸신잡 중간 광고 같다라는 둥, 더 읽어달라고 조르는 때가 있어서 한개 챕터를 더 읽어주는 때도 더러 있었다. </p><p>8주 가량이 지난 지금 9개 이야기 중에서 7개를 읽었으니 양도 그렇게 적지 않아서, 아기한테 이야기를 들려주고 싶을 때 좋은 것 같다. </p><h4 id="6개월-임산부의-변화"><a href="#6개월-임산부의-변화" class="headerlink" title="[6개월] 임산부의 변화"></a>[6개월] 임산부의 변화</h4><ul><li>배가 눈에 띄게 커지고, 엉덩이와 대퇴부에도 살이 찐다.</li><li>가슴이 커지고 가슴의 혈관이 두드러지게 나타난다. </li><li>기본적인 신진대사량이 20% 증가하면서 체온이 올라간다.</li></ul><h4 id="6개월-태아의-변화"><a href="#6개월-태아의-변화" class="headerlink" title="[6개월] 태아의 변화"></a>[6개월] 태아의 변화</h4><ul><li>뇌가 급속도로 성장하고 청각이 발달한다. 연구 결과를 보면 아기가 클래식과 대중음악 중에 무엇을 선호하는지 의사소통을 할 수 있다고 한다.</li><li>23주 눈썹과 속눈썹이 생기고, 잇몸 밑으로 치아가 보이기 시작한다.</li><li>25주 몸이 통통해지고 피부는 쭈글쭈글해진다. 호흡을 위한 연습을 한다. </li><li>26주 폐 속에 공기가 없지만 호흡 동작을 한다. 건드리면 반응을 보인다. </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;2018-01-07-일&quot;&gt;&lt;a href=&quot;#2018-01-07-일&quot; class=&quot;headerlink&quot; title=&quot;2018.01.07(일)&quot;&gt;&lt;/a&gt;2018.01.07(일)&lt;/h2&gt;&lt;p&gt;해가 바뀌어 황금개 띠의 해가 밝았다. 안팎으로 느
      
    
    </summary>
    
      <category term="Diary" scheme="https://kalipso.github.io/categories/Diary/"/>
    
      <category term="태교일기" scheme="https://kalipso.github.io/categories/Diary/%ED%83%9C%EA%B5%90%EC%9D%BC%EA%B8%B0/"/>
    
    
      <category term="태교일기" scheme="https://kalipso.github.io/tags/%ED%83%9C%EA%B5%90%EC%9D%BC%EA%B8%B0/"/>
    
      <category term="임신 23주" scheme="https://kalipso.github.io/tags/%EC%9E%84%EC%8B%A0-23%EC%A3%BC/"/>
    
      <category term="똥글이" scheme="https://kalipso.github.io/tags/%EB%98%A5%EA%B8%80%EC%9D%B4/"/>
    
      <category term="태교동화" scheme="https://kalipso.github.io/tags/%ED%83%9C%EA%B5%90%EB%8F%99%ED%99%94/"/>
    
  </entry>
  
  <entry>
    <title>Scala-IDE에서 Spark 셋팅과 WordCount</title>
    <link href="https://kalipso.github.io/2018/01/04/Setup-Spark-in-ScalaIDE-and-WordCount-example/"/>
    <id>https://kalipso.github.io/2018/01/04/Setup-Spark-in-ScalaIDE-and-WordCount-example/</id>
    <published>2018-01-04T14:45:05.000Z</published>
    <updated>2018-01-04T14:46:41.805Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spark-개발환경-셋팅"><a href="#Spark-개발환경-셋팅" class="headerlink" title="# Spark 개발환경 셋팅"></a># Spark 개발환경 셋팅</h2><p>의외로 친절하게 정리된 글이 없어서 Window 10 환경에서 Spark의 개발환경을 잡는 일이 쉽지 않았는데, <a href="http://www.devinline.com/2016/01/apache-spark-setup-in-eclipse-scala-ide.html" target="_blank" rel="external">한 외국 블로거의 글</a>을 따라하고 성공했습니다. Scala-IDE로 개발환경을 잡고 Spark의 “Hello World”이라 할 수 있는 WordCount를 실행해보도록 하겠습니다.</p><blockquote><p>Apache Spark는 하둡 기반의 데이터 처리 프레임워크인 Map-Reduce가 가진 단점들을 보완하기 위하여 2009년 UC Berkeley 대학의 연구로 시작되어 2012년 미국 NSDI 학회에서 RDD(Resilient Distributed Dataset) 논문이 발표되면서 알려진 기술입니다. </p><p>스파크는 하둡과 달리 <u>메모리를 이용한 데이터 저장 방식</u>을 제공함으로써 머신러닝 등 반복적인 데이터 처리가 필요한 분야에서 높은 성능을 보여줍니다. 또한 강력한 데이터 처리 함수를 제공하여 프로그램의 복잡도를 크게 낮춰줍니다. </p><p>2016년 11월 Spark 2.0 버전이 출시되었는데, 이는 Spark 1.x 보다 10배 정도 향상된 처리 속도를 보여준다고 합니다. 또한 Java, Scala, Python 뿐 아니라 분석 환경에서 많이 사용되고 있는 R스크립트를 이용해서도 Application을 작성할 수 있게 되었습니다.</p></blockquote><h4 id="1-Scala-IDE-다운로드"><a href="#1-Scala-IDE-다운로드" class="headerlink" title="1. Scala IDE 다운로드"></a>1. Scala IDE 다운로드</h4><p> Scala IDE는 Scala, 혹은 Scala-Java 혼합 Application의 개발환경을 제공하는 eclipse project입니다. <a href="http://scala-ide.org" target="_blank" rel="external">http://scala-ide.org</a> 를 방문하여 IDE를 Download하고 install합니다. 2017년 11월 현재 최신 Release는 4.7.0(이 글을 마무리하게 된 시기는 2018년 1월입니다만 버전은 동일합니다)네요.</p><p><img src="https://farm5.staticflickr.com/4537/37710863985_e2588309b4.jpg" alt="Scala IDE for eclipse"></p><p>압축을 풀고 설치를 마무리한 후, eclipse를 엽니다. </p><blockquote><p>이유는 알 수 없으나 eclipse가 간혹 An error has occurred. See the log file<br>C:\dev\workspace\scala.metadata.log. 라는 에러 메시지를 뱉습니다. 로그를 확인해보면 <u>java.lang.AssertionError: assertion failed</u>라는 에러가 보이는데, workspace의 .metadata.plugins\org.eclipse.e4.workbench\workbench.xmi 파일을 삭제하면 해결됩니다.</p></blockquote><h4 id="2-maven-project-생성"><a href="#2-maven-project-생성" class="headerlink" title="2. maven project 생성"></a>2. maven project 생성</h4><p>Maven은 가장 인기있는 Library 관리 및 빌드 툴 중 하나입니다. 이 예제에서는 Maven을 통해 프로젝트를 생성합니다. </p><ol><li><p><strong>File -&gt; New -&gt; Project -&gt; Maven Project</strong>를 선택하여 프로젝트를 생성합니다.  예제에서는 Group Id는 io.github.kalipso.spark로, Artifact Id는 Spark Sample로 지정하였습니다. </p><p>​</p><p><img src="https://farm5.staticflickr.com/4551/37710863595_00d6c6dbb0_z.jpg" alt=""></p><p>​</p><p><img src="https://farm5.staticflickr.com/4547/38599065561_c278aa5350_z.jpg" alt=""></p><p>​</p></li><li><p><a href="https://drive.google.com/file/d/15_QoyH0YIG5UKzSpbPqsWQzC-3LGDPIf/view?usp=sharing" target="_blank" rel="external">pom.xml Sample</a> 을 다운로드하고 SparkSample 프로젝트 Root에 위치한 pom.xml을 수정합니다. </p></li><li><p>Project에서 오른쪽 마우스 버튼을 클릭, <strong>Configure -&gt; Add Scala Nature</strong> 을 선택하여 Scala Nature를 추가합니다. </p></li><li><p>Spark를 위한 Scala Compiler를 선택합니다. Scala IDE는 기본적으로  <code>Lastest 2.12 bundle (dynamic)</code>을 사용하고 있으나 Spark는 2.10을 사용하기 때문에,  Compiler를 변경해주어야 합니다.<br>Project에서 오른쪽 마우스 버튼을 클릭, <strong>Properties -&gt; Scala compiler</strong>에서 <code>Fixed Scala Installation: 2.10.6 (built-in)</code> 을 선택합니다. </p><p>​</p><p><img src="https://farm5.staticflickr.com/4635/24629943397_4586f00db1_z.jpg" alt=""></p><p>​</p></li><li><p>Source 폴더를 <strong>src/main/java</strong>에서 <strong>src/main/scala</strong>로 변경합니다.  해당 폴더에서 오른쪽 마우스 버튼 클릭 -&gt; Refactor -&gt; Rename을 선택하여  scaca로 변경합니다.</p><blockquote><p>project에 에러표시가 있다면 Project 오른쪽 마우스버튼 클릭 -&gt; Maven -&gt; Update Project를 선택하여 해당 프로젝트의 Maven Update를 수행하면 필요한 라이브러리 다운로드 및 빌드를 통해 에러가 없어집니다. </p></blockquote></li></ol><h4 id="3-WordCount-프로그램"><a href="#3-WordCount-프로그램" class="headerlink" title="3. WordCount 프로그램"></a>3. WordCount 프로그램</h4><ol><li><p>src/main/scala 밑에 패키지를 생성하고, scala Object를 생성합니다. </p><p>​</p><p><img src="https://farm5.staticflickr.com/4638/39497161721_e7df408a36.jpg" alt=""></p><p>​</p><p><img src="https://farm5.staticflickr.com/4684/39497161701_0a380ec2bf.jpg" alt=""></p><p>​</p></li><li><p>WordCount.scala를 아래와 같이 구성합니다.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> io.github.kalipso.spark</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></div><div class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkContext</span></div><div class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span>.rddToPairRDDFunctions</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">WordCount</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) = &#123;</div><div class="line"></div><div class="line">    <span class="comment">//Start the Spark context</span></div><div class="line">    <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>()</div><div class="line">      .setAppName(<span class="string">"WordCount"</span>)</div><div class="line">      .setMaster(<span class="string">"local"</span>)</div><div class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</div><div class="line"></div><div class="line">    <span class="comment">//Read some example file to a test RDD</span></div><div class="line">    <span class="keyword">val</span> test = sc.textFile(<span class="string">"src/main/shakespeare.txt"</span>)</div><div class="line"></div><div class="line">    test.flatMap &#123; line =&gt; <span class="comment">//for each line</span></div><div class="line">      line.split(<span class="string">" "</span>) <span class="comment">//split the line in word by word.</span></div><div class="line">    &#125;</div><div class="line">      .map &#123; word =&gt; <span class="comment">//for each word</span></div><div class="line">        (word, <span class="number">1</span>) <span class="comment">//Return a key/value tuple, with the word as key and 1 as value</span></div><div class="line">      &#125;</div><div class="line">      .reduceByKey(_ + _) <span class="comment">//Sum all of the value with same key</span></div><div class="line">      .saveAsTextFile(<span class="string">"output.txt"</span>) <span class="comment">//Save to a text file</span></div><div class="line"></div><div class="line">    <span class="comment">//Stop the Spark context</span></div><div class="line">    sc.stop</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>​</p></li><li><p><a href="https://drive.google.com/file/d/1Mfxp1R3TtJzAnjIb3Ix_Corl0YSeOaI_/view?usp=sharing" target="_blank" rel="external">Text Sample</a>을 다운받아서 위에서 지정한 것처럼 src/main 하단에 복사합니다.  </p></li><li><p>WordCount 프로그램을 동작합니다. WordCount.scala 오른쪽 마우스 버튼 클릭 -&gt; Run as -&gt; Scala Application을 선택하여 동작시킬 수 있습니다. </p></li></ol><p>위 소스의 대략적인 로직을 그림으로 표현해보면 아래와 같습니다.</p><p><img src="https://farm5.staticflickr.com/4688/24630076017_15143cd250_o.png" alt=""></p><p>정상적인 상황이라면, 프로그램은 output.txt라는 Directory 안에 아래와 같은 2개의 파일을 만들겁니다.</p><ul><li>SUCCESS</li><li>part-00000</li></ul><p>part-00000 안에는 다음과 같은 결과들이 저장됩니다. </p><p>(fartuous,1)<br>(hem,1)<br>(meets,,1)<br>(toll,,1)<br>(melody?,1)<br>(it!-,3)<br>(tough,6)<br>(briefly,,7)</p><p>이상 Window 10 환경에서의 Spark 개발환경 구성 및 WordCount 예제를 살펴보았습니다~</p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="http://www.devinline.com/2016/01/apache-spark-setup-in-eclipse-scala-ide.html" target="_blank" rel="external">Setup Apache Spark in eclipse(Scala IDE) : Word count example using Apache spark in Scala IDE</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Spark-개발환경-셋팅&quot;&gt;&lt;a href=&quot;#Spark-개발환경-셋팅&quot; class=&quot;headerlink&quot; title=&quot;# Spark 개발환경 셋팅&quot;&gt;&lt;/a&gt;# Spark 개발환경 셋팅&lt;/h2&gt;&lt;p&gt;의외로 친절하게 정리된 글이 없어서 Wi
      
    
    </summary>
    
      <category term="Application" scheme="https://kalipso.github.io/categories/Application/"/>
    
      <category term="Spark" scheme="https://kalipso.github.io/categories/Application/Spark/"/>
    
    
      <category term="Spark 개발환경 구성" scheme="https://kalipso.github.io/tags/Spark-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%84%B1/"/>
    
      <category term="Scala IDE" scheme="https://kalipso.github.io/tags/Scala-IDE/"/>
    
      <category term="WordCount" scheme="https://kalipso.github.io/tags/WordCount/"/>
    
      <category term="Scala" scheme="https://kalipso.github.io/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>당일치기 천안여행 (feat.알쓸신잡)</title>
    <link href="https://kalipso.github.io/2017/12/19/travel-diary-cheonan-201712/"/>
    <id>https://kalipso.github.io/2017/12/19/travel-diary-cheonan-201712/</id>
    <published>2017-12-18T17:21:19.000Z</published>
    <updated>2018-01-19T13:18:50.792Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2017-12-16-토"><a href="#2017-12-16-토" class="headerlink" title="2017.12.16(토)"></a>2017.12.16(토)</h2><p>지난 주 목요일 알쓸신잡 천안 편을 보다가 <a href="http://program.tving.com/tvn/trivia2/7/Board/View?b_seq=38" target="_blank" rel="external">황교익 선생이 먹는 병천 순대</a>가 먹고 싶다는 와이프님 말씀에 주말 즉석 여행이 기획되었다. 연이은 송년회에 준비할 시간이 없었던 탓에 병천 순대와 식물원만 테마로 정하고 토요일 오전 느즈막하게 집을 떠났다. </p><p>세 명이(비록 하나는 배 안에 있지만) 함께하는 첫번째 여행이다. 한시간 반 정도? 적지 않은 시간이었지만 와이프와 이런저런 수다를 떨다보니 지루할 틈도 없이 청화집순대에 도착했다. </p><h4 id="청화집순대"><a href="#청화집순대" class="headerlink" title="청화집순대"></a>청화집순대</h4><p>추운 날씨에도 사람들이 대문 바깥까지 줄을 서서 기다리고 있었다.  우리 앞에서 한 남자가 무슨 순대국을 줄을 서서 먹냐고 짜증을 냈는데, 아내로 보이는 사람이 건너편 집은 그나마도 두배를 기다려야 한다면서 달랜다. 알고보니 병천순대거리에는 순대집들이 줄줄이 있는데, 그 중 오래 되고 인기가 많은 곳이 원조집인 충남집과 청화집, 박순자 아우내순대라고 한다. 특히 충남집은 조점례 남문 피순대(전주), 송정3대국밥(부산), 순대실록(서울)과 함께 전국 순대 4대 천왕이라 소개되기도 했단다. </p><p>하지만 나도 순대 먹은지 수 십년, 순대국밥을 먹은지도 10년이 되었다. 전주에서 먹은 피순대도 특별난 맛을 느끼지 못했기에, 이번에도 큰 기대는 하지 않았다. 더군다나 원조집은 옆에 있고, 나는 알쓸신잡의 발자취를 따라 그 옆집에 왔으니. </p><p><img src="https://farm5.staticflickr.com/4688/38394875404_aea67dfdd6_z.jpg" alt="청화집순대의 순대와 순대국"></p><p>하지만, 맛집을 찾으려면 맛집 옆집으로 가라는 황교익 선생의 말은 틀리지 않았다. </p><p>잡내가 없고 씹는 맛이 풍부했다. 고기 맛은 또 어찌나 좋은지. 순대맛에 대한 자세한 소개는 다른 <a href="https://m.blog.naver.com/PostView.nhn?blogId=gaogaiga2000&amp;logNo=220502554782&amp;proxyReferer=https%3A%2F%2Fwww.google.co.kr%2F" target="_blank" rel="external">블로거의 글</a>에 양보한다. 어쨌거나 오랜 동안 이마트 분당점 지하에서 파는 순대에 순한 양처럼 길들여진 우리의 입맛은 청화집으로 와서 성난 늑대가 되었다ㅠㅜ 우리 부부는 앞으로 적어도 당분간은, 이마트 순대를 못먹게 될 것임을 직감했다. </p><h4 id="유관순-열사-기념관"><a href="#유관순-열사-기념관" class="headerlink" title="유관순 열사 기념관"></a>유관순 열사 기념관</h4><p>병천(竝川)을 우리 말로 아우내라고 한다. 병천은 유관순 열사가 3월 1일 만세운동을 겪은 후 고향으로 내려와 부모와 함께 4월 1일 아우내 장터 만세운동을 주도하고 일제의 헌병에 붙잡힌 곳이다. 순대집을 나와 약 1.5km 떨어진 유관순 열사 기념관을 찾았다. 가슴이 아팠고, 또 먹먹했다. 유관순 누나라고 부르던 때가 있었는데 유관순이 참 앳된 나이에 갔구나라는 생각에 안타까웠다. 유관순이 꽤나 키가 컸다는 것은 의외여서 놀라웠다. </p><p><img src="https://farm5.staticflickr.com/4588/38394924234_7c2ce8910e_z.jpg" alt="왠만한 일본 순사들 내려다 봤겠는데? ㅎㅎ"></p><p>짧은 생애였고 짧은 볼거리를 제공하는 기념관이었지만 여운이 남는 장소였다. 태극기와 성조기를 흔들어대는 시위대들 덕분에 태극기에 대한 인식이 많이 나빠져있었는데, 태극기를 다시 한번 돌아볼 수 있게 된 것도 반가웠다. </p><h4 id="세계꽃식물원-그리고-지중해마을"><a href="#세계꽃식물원-그리고-지중해마을" class="headerlink" title="세계꽃식물원, 그리고 지중해마을"></a>세계꽃식물원, 그리고 지중해마을</h4><p>시간이 어느 덧 오후 3시를 지나고 있었다. 세계꽃식물원은 6시에 닫는다. 똥글이에게 꽃을 보여주고 싶은 산모를 위해 서둘러서 식물원으로 이동했다. 겨울에도 정상 영업한다는 세계꽃식물원은 밖에서 보기에는 다소 썰렁했다. 주차장도 한산하고 카페와 식물원 구성은 약간 엉성해보였다. </p><p>하지만 꽃은 이름을 알수록, 가까이 볼수록 더 예뻤다. </p><p>화려한 꽃만 예쁜 것이 아니다. 각자가 처한 환경에서 생명을 틔워내고 구불구불 굽이치고 어우러져 있다는 것은 얼마나 위대하고 기특한 것인지. </p><p><img src="https://farm5.staticflickr.com/4636/39073959152_9d9197c734_z.jpg" alt="세계꽃식물원에 피어있는 세계의 꽃"></p><p>나오면서 화장실을 갔는데 추운 날씨에 김이 날만큼 따뜻한 물이 나왔다. 첫인상보다, 뒷모습이 더 좋은 식물원이었다. </p><p>어둑어둑 해가 지면서, 식사도 할 겸, 중간에 사지 못한 호두과자 대신 호두파이도 살 겸 지중해마을에 들렸다. 알쓸신잡에서 유시민이 저녁 어둑어둑해서 도착했고 낮에 오지 못함을 아쉬워한 것처럼, 우리도 어둑어둑 도착해서 낮에 오지 못함을 아쉬워했다. </p><p><img src="https://farm5.staticflickr.com/4730/38394874994_fd1dfdcfa6_o.png" alt="늦은 저녁 지중해마을"></p><p>우리는 즐거운 하루를 보냈다. 그리고.. 아내는 병천 순대 덕에 입맛과 몸무게를 되찾았다^^</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;2017-12-16-토&quot;&gt;&lt;a href=&quot;#2017-12-16-토&quot; class=&quot;headerlink&quot; title=&quot;2017.12.16(토)&quot;&gt;&lt;/a&gt;2017.12.16(토)&lt;/h2&gt;&lt;p&gt;지난 주 목요일 알쓸신잡 천안 편을 보다가 &lt;a h
      
    
    </summary>
    
      <category term="Diary" scheme="https://kalipso.github.io/categories/Diary/"/>
    
      <category term="일상/여행" scheme="https://kalipso.github.io/categories/Diary/%EC%9D%BC%EC%83%81-%EC%97%AC%ED%96%89/"/>
    
    
      <category term="알쓸신잡" scheme="https://kalipso.github.io/tags/%EC%95%8C%EC%93%B8%EC%8B%A0%EC%9E%A1/"/>
    
      <category term="천안아산" scheme="https://kalipso.github.io/tags/%EC%B2%9C%EC%95%88%EC%95%84%EC%82%B0/"/>
    
      <category term="청화집순대" scheme="https://kalipso.github.io/tags/%EC%B2%AD%ED%99%94%EC%A7%91%EC%88%9C%EB%8C%80/"/>
    
      <category term="장신 유관순" scheme="https://kalipso.github.io/tags/%EC%9E%A5%EC%8B%A0-%EC%9C%A0%EA%B4%80%EC%88%9C/"/>
    
      <category term="세계꽃식물원" scheme="https://kalipso.github.io/tags/%EC%84%B8%EA%B3%84%EA%BD%83%EC%8B%9D%EB%AC%BC%EC%9B%90/"/>
    
      <category term="지중해마을" scheme="https://kalipso.github.io/tags/%EC%A7%80%EC%A4%91%ED%95%B4%EB%A7%88%EC%9D%84/"/>
    
  </entry>
  
  <entry>
    <title>［태교일기］ 임신 19주 4일</title>
    <link href="https://kalipso.github.io/2017/12/10/papa-diary-pregnant-19w/"/>
    <id>https://kalipso.github.io/2017/12/10/papa-diary-pregnant-19w/</id>
    <published>2017-12-10T12:30:07.000Z</published>
    <updated>2017-12-10T12:30:39.162Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2017-12-10-일"><a href="#2017-12-10-일" class="headerlink" title="2017.12.10(일)"></a>2017.12.10(일)</h2><p>정신없는 시간들이었다. 11월에 새로운 프로젝트에 투입되었고, 2군데의 산후조리원을 예약한 뒤 하나를 취소했다. 12월 1일에는 아파트 옆동으로 이사를 했고, 그 날 저녁 아버지는 소장 쪽에 꽤 큰 수술을 하셨다.  혼자 일기를 쓰면서 변명을 하는 것도 우습지만, 이제 막 시작한 블로그가 한동안 뜸했던 것이 용두사미처럼 흐지부지 되는 것이 아님을 스스로에게 확인시켜주고 다시 한번 마음을 가다듬고 싶었다. (그러고보니, 어릴 적 일기를 쓸 때도 이런 적이 있었던 것 같기도 ㅋㅋ)</p><p>시간이 흘러 이제 아내는 임신 19주 4일에 접어들었다.  사랑하는 사람이 임신으로 배가 불러있는 것은 참 기분 좋은 일인 것 같다.  츤츤거리는게 특기인 나는 ‘이게 니 배인지 내 배인지’ 하면서 아내를 놀리기는 하지만, 그래도 불러오는 배를 쓰다듬는 것은 근사한 느낌이다.</p><p><img src="https://farm5.staticflickr.com/4726/38068022145_0cda00608c.jpg" alt="임신 19주 아내의 배"></p><p>지난 주 수요일부터는 같이 수영을 다니고 있다. 비록 상급반으로 내려가서 어르신들과 함께 천천히 하고는 있지만.. 아내는 수영을 시작으로 요가와 뜨개질, 플룻 등 태교(및 취미생활)를 본격적으로 시작하고 있다. 여보~ 우리 책도 꾸준히 읽어주자~ 응?</p><h2 id="태동"><a href="#태동" class="headerlink" title="태동"></a>태동</h2><p>아내는 18주 부터는 물방울이 터지는 듯한 느낌으로 움직임이 있단다.  그래도 뻥뻥 차는 느낌이 아니고 그나마도 하루에 한번도 못느끼는 경우가 있아서 걱정 반, 기대 반으로 본격적인 태동을 기다리고 있다. 태동이 많지 않다면 얌전한 아이가 나오는 거겠거니, 하고 걱정을 달래본다. 책에서는 이렇게 이야기한다. </p><p><code>임신 5개월이 되어도 태동을 느끼지 못하면 의사에게 이야기하세요. 그러나 걱정하지는 마세요. 심박동 소리가 잘 들리고 다른 중요한 징조들이 안정되어 있으면 걱정할 일은 아니고 다만 예정일이 생각보다 늦기 때문인지 모르니까요.</code></p><p>똥글아, 건강하게 잘 지내고 엄마 아빠에게 잘 놀고 있다고 신호를 보내주렴~</p><h5 id="5개월-임산부의-변화"><a href="#5개월-임산부의-변화" class="headerlink" title="[5개월] 임산부의 변화"></a>[5개월] 임산부의 변화</h5><ul><li><p>철분제와 종합비타민, 오메가3 등을 복용하면서 변비 기운이 지속된다. (까만X을 호소함)</p></li><li><p>피부가 건조해지면서 등허리 쪽에 피부 트러블이 생겼다. 가습기 사용이 시급함..</p></li><li><p>20주 정도가 되면 혈액 속 철분이 많이 요구되어 빈혈이 생길 수 있다.</p><p>​</p></li></ul><h4 id="5개월-태아의-변화"><a href="#5개월-태아의-변화" class="headerlink" title="[5개월] 태아의 변화"></a>[5개월] 태아의 변화</h4><ul><li>아기가 발길질을 하고, 팔을 움직이고, 손가락과 발가락을 움직이는 태동을 느낄 수 있다.</li><li>22주 정도가 되면 체중이 650g, 키는 28~30cm까지 자란다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;2017-12-10-일&quot;&gt;&lt;a href=&quot;#2017-12-10-일&quot; class=&quot;headerlink&quot; title=&quot;2017.12.10(일)&quot;&gt;&lt;/a&gt;2017.12.10(일)&lt;/h2&gt;&lt;p&gt;정신없는 시간들이었다. 11월에 새로운 프로젝트에 
      
    
    </summary>
    
      <category term="Diary" scheme="https://kalipso.github.io/categories/Diary/"/>
    
      <category term="태교일기" scheme="https://kalipso.github.io/categories/Diary/%ED%83%9C%EA%B5%90%EC%9D%BC%EA%B8%B0/"/>
    
    
      <category term="태교일기" scheme="https://kalipso.github.io/tags/%ED%83%9C%EA%B5%90%EC%9D%BC%EA%B8%B0/"/>
    
      <category term="똥글이" scheme="https://kalipso.github.io/tags/%EB%98%A5%EA%B8%80%EC%9D%B4/"/>
    
      <category term="임신 19주" scheme="https://kalipso.github.io/tags/%EC%9E%84%EC%8B%A0-19%EC%A3%BC/"/>
    
      <category term="태동" scheme="https://kalipso.github.io/tags/%ED%83%9C%EB%8F%99/"/>
    
  </entry>
  
  <entry>
    <title>［태교일기］ 임신 16주 3일</title>
    <link href="https://kalipso.github.io/2017/11/19/papa-diary-pregnant-16w/"/>
    <id>https://kalipso.github.io/2017/11/19/papa-diary-pregnant-16w/</id>
    <published>2017-11-18T15:23:19.000Z</published>
    <updated>2017-11-18T15:27:06.177Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2017-11-18-토"><a href="#2017-11-18-토" class="headerlink" title="2017.11.18(토)"></a>2017.11.18(토)</h2><p>주말 아침, 우리 부부는 아침을 일찍 챙겨먹고 9시가 되기 전에 산부인과에 도착해서 1번 대기표를 끊었다. 원래 예약일은 21일 화요일이었지만 나도 초음파를 통해서나마 우리 똥글이를 직접 보고 싶었다. </p><p>얼마나 긴 시간이었던가. 9월 초중순 원인 모를 하혈이 있을 때만 해도 아내에게 내색할 수는 없었지만 나도 적잖이 걱정하고 긴장 했더랬다. 하루하루가 어찌나 긴지, 다음 검사까지의 시간이 영원처럼 느껴졌다. 우리 주변의 시간만이 아주 길게 왜곡되어 있는 것 같은. 그래서 시간의 늪에 빠져있는 느낌이랄까. 불안감에 한약도 지어먹고, 조심스런 하루하루를 건너왔다. 기형아 검사도 마치고 나니 한결 마음이 편해지고는 있지만. 여전히 우리의 하루하루는 참 길다. 그런 긴 시간을 건너고 있는데, 똥글이를 보기 위해 한두시간 기다리는게 무슨 대수란 말인가.</p><p>예약을 하고 온 산모와 신랑들 구경도 하고, 같이 책도 보면서(나는 선물 받은 《기사단장 죽이기》를, 아내는 내가 <del>강권한</del> 권한 《내 아이를 위한 두뇌코칭》을 보고 있다) 시간을 보내다가, 병원에 운영하고 있는 산후조리원 투어를 하고 와서야 진료를 볼 수 있었다. </p><h4 id="똥글이는-남자-여자"><a href="#똥글이는-남자-여자" class="headerlink" title="똥글이는 남자? 여자?"></a>똥글이는 남자? 여자?</h4><p>아내가 진료실에 먼저 들어가고, 곧 이어서 간호사가 “산모님 보호자분~”을 불렀다. 초음파로 이제는 제법 사람의 형태를 갖춰가고 있는  똥글이를 보면서 상태를 체크했다.</p><p><img src="https://farm5.staticflickr.com/4541/38466052422_fc4978402c.jpg" alt="똥글이 16주 3일"> </p><p>“자궁 경부 길이도.. 정상이고요.. 머리 지름은 보시는 것처럼 3.32cm… 몸통은 … 양수 길이도 정상이네요.”.. “심장도 157.89.. 규칙적으로 잘 뛰고 있어요 “</p><p>하나같이 다 반가운 말들이었다. 지난달에 봤을 때는 다리가 짤막했는데, 다리가 길쭉해지고 콧대도 더 또렷해진 것 같다. </p><p>그러다가 선생님이 갑자기 얘기해준다. “똥글이는 아들인 것 같네요~”</p><p>“아.. 그걸 어떻게 알죠? 탯줄이랑 헷갈릴 수도 있고..”라면서 아직 확실히는 모르는 것 아니냐는 투로 얘기를 했더니 선생님이 똥글이의 다소 민망한 자세를 보여주셨다. (똥글아. 아빠가 미안하다)</p><p><img src="https://farm5.staticflickr.com/4538/38442609056_3c77540955.jpg" alt="똥글이의 굴욕"></p><p>“자 여기 로켓처럼 솟아오른 것 보이시죠?”</p><p>“아…” </p><p>우리 부부는 가만히 고개를 끄덕였다. 이렇게 똥글이는 남아로 판명되었다.</p><h4 id="4개월-임산부의-변화"><a href="#4개월-임산부의-변화" class="headerlink" title="[4개월] 임산부의 변화"></a>[4개월] 임산부의 변화</h4><ul><li>입덧 : 어떤 책에서는 4개월~6개월이 가장 편안한 때라고도 하는데, 아내는 아직 입덧을 하고 있다. 3개월 즈음에 거의 매일 토하고 밥을 거의 못 먹었는데, 4개월에 접어들면서 약간은 편안해지고 있다. </li><li>체중 : 3개월까지 5~7kg 정도가 빠졌는데,  4개월에 접어들면서 완만한 회복세를 보이고 있다. 한 3kg 정도는 회복한 듯. </li></ul><h4 id="4개월-태아의-변화"><a href="#4개월-태아의-변화" class="headerlink" title="[4개월] 태아의 변화"></a>[4개월] 태아의 변화</h4><ul><li>아이의 체중은 145g 정도로 측정되었다.  18주가 되면 무게 300g에 키도 20~25cm까지 자란다고 한다. </li><li>15주 : 다리가 팔보다 길어진다.</li><li>16주 : 주먹을 쥐고 입을 벌리거나 입술을 움직일 수 있다.  손톱이 형성된다. 심장이 117~157회 박동한다. 위장이 소화액을 만들어내고, 신장이 소변을 만들어낸다.</li><li>17 주 : 갈색 피하 지방이 생긴다. 17~20주에 청각 기관이 발달하여 내장 기관과 외부 세상의 소리를 들을 수 있다. </li><li>18주 : 귀가 머리 쪽으로 올라가고 솜털이 몸을 덮는다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;2017-11-18-토&quot;&gt;&lt;a href=&quot;#2017-11-18-토&quot; class=&quot;headerlink&quot; title=&quot;2017.11.18(토)&quot;&gt;&lt;/a&gt;2017.11.18(토)&lt;/h2&gt;&lt;p&gt;주말 아침, 우리 부부는 아침을 일찍 챙겨먹고 9시
      
    
    </summary>
    
      <category term="Diary" scheme="https://kalipso.github.io/categories/Diary/"/>
    
      <category term="태교일기" scheme="https://kalipso.github.io/categories/Diary/%ED%83%9C%EA%B5%90%EC%9D%BC%EA%B8%B0/"/>
    
    
      <category term="태교일기" scheme="https://kalipso.github.io/tags/%ED%83%9C%EA%B5%90%EC%9D%BC%EA%B8%B0/"/>
    
      <category term="똥글이" scheme="https://kalipso.github.io/tags/%EB%98%A5%EA%B8%80%EC%9D%B4/"/>
    
      <category term="임신 16주" scheme="https://kalipso.github.io/tags/%EC%9E%84%EC%8B%A0-16%EC%A3%BC/"/>
    
      <category term="성별구분" scheme="https://kalipso.github.io/tags/%EC%84%B1%EB%B3%84%EA%B5%AC%EB%B6%84/"/>
    
  </entry>
  
  <entry>
    <title>［Scala 기초］ Scala로 구구단 만들기</title>
    <link href="https://kalipso.github.io/2017/11/10/Scala-Gugudan-Basic-Grammar/"/>
    <id>https://kalipso.github.io/2017/11/10/Scala-Gugudan-Basic-Grammar/</id>
    <published>2017-11-10T05:18:44.000Z</published>
    <updated>2017-11-10T08:49:01.448Z</updated>
    
    <content type="html"><![CDATA[<p>프로젝트에서 사용할 수 있다는 이유 때문에 최근 Scala를 공부하고 있습니다. </p><p>지금까지 써본 개발 언어는 ASP, PHP 같은 스크립트 언어(<del>나이가 탄로나나요.. 쿨럭</del>), 비교적 최근에 썼던 언어로는 Java, Python과 Javascript 등이 있습니다만, 객체지향의 특징과 함수 지향의 특징을 가지고 있는 Scala는 또 매우 새롭더군요. </p><p>간단한 예제를 통해서 Scala의 특징을 짚어보고자 합니다. Scala를 창시한 마틴 오더스키가 직접 쓴 “Programming in Scala 3/e”로 공부하는 중인데, 아래 내용은 대략 1~7장까지의 내용을 나름대로 정리한 것으로 보면 되겠습니다</p><h3 id="구구단-프로그램"><a href="#구구단-프로그램" class="headerlink" title="구구단 프로그램"></a>구구단 프로그램</h3><p>아래는 IntelliJ의 Scala WorkSheet에서 작성해본 구구단 출력 프로그램 소스입니다.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">makeRow</span></span>(dan: <span class="type">Int</span>, num: <span class="type">Int</span>) : <span class="type">String</span> = &#123;</div><div class="line">  <span class="keyword">val</span> result = <span class="string">" "</span>* (<span class="number">2</span> - (dan * num).toString.length) + (dan * num).toString</div><div class="line">  <span class="string">s"<span class="subst">$dan</span> × <span class="subst">$num</span> = <span class="subst">$result</span>"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">makeMultiTable</span></span>() = &#123;</div><div class="line">  <span class="keyword">val</span> rowTable = <span class="keyword">for</span> &#123;</div><div class="line">    i &lt;- <span class="number">1</span> to <span class="number">9</span></div><div class="line">    <span class="keyword">if</span> (i != <span class="number">1</span>);</div><div class="line">    j &lt;- <span class="number">1</span> to <span class="number">9</span></div><div class="line">  &#125; <span class="keyword">yield</span> &#123;</div><div class="line">    (<span class="keyword">if</span>(j == <span class="number">1</span>) <span class="string">s"\n[<span class="subst">$i</span> 단]\n"</span> <span class="keyword">else</span> <span class="string">""</span>) + makeRow(i, j)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  rowTable.mkString(<span class="string">"\n"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">println(makeMultiTable)</div></pre></td></tr></table></figure><h4 id="1-함수의-정의"><a href="#1-함수의-정의" class="headerlink" title="1. 함수의 정의"></a>1. 함수의 정의</h4><p><img src="https://farm5.staticflickr.com/4564/38297482051_b2b9c07b18_z.jpg" alt="함수의 형태"></p><ul><li>기본적인 구조는 위와 같이 구구단 소스 1 line과 같이 def + 함수명 + 파라미터 목록 + 함수 결과 타입 + 등호(=) + 중괄호({})안에 본문입니다.</li><li>Result type은 생략할 수 있으나, 함수가 재귀적으로 정의되어 있을 경우에는 반드시 명시해야 합니다. 값의 반환이 없는 함수는 Result Type이 Unit이며, 이는 Java의 void와 같습니다. </li><li>함수 본문에 return이 없는데, scala는 return을 사용하지 않아도 맨 나중에 계산한 값을 반환합니다.</li><li>scala에서 <strong>함수는 1급 계층(first class) 값</strong>입니다. 즉, 함수는 문자열과 동일한 자격을 갖는 값으로 함수를 다른 함수에 인자로 넘길 수 있고, 함수 안에서 결과로 함수를 반환할 수도 있고, 함수를 변수에 저장할 수도 있습니다. </li><li>다음과 같이 함수 리터럴을 사용하기도 합니다.</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* String 배열을 출력 */</span></div><div class="line"><span class="comment">//#1. 함수 리터럴을 사용하는 경우</span></div><div class="line">args.foreach(arg =&gt; println(arg))</div><div class="line"></div><div class="line"><span class="comment">//#2. 함수 리터럴에서 인자의 타입을 명시적으로 표현</span></div><div class="line">args.foreach((arg: <span class="type">String</span>) =&gt; println(arg))</div><div class="line"></div><div class="line"><span class="comment">//#3. 함수 리터럴이 인자를 하나만 받는 경우 해당 인자를 생략 가능</span></div><div class="line">args.foreach(println)</div></pre></td></tr></table></figure><h4 id="2-변수의-정의"><a href="#2-변수의-정의" class="headerlink" title="2. 변수의 정의"></a>2. 변수의 정의</h4><ul><li>2번째 라인 <code>val result = &quot;~&quot;</code> 구문은 변수에 값을 할당하는 부분입니다.</li><li>스칼라에는 val, var의 두 종류 변수가 있습니다. </li><li>val은 Java의 final 변수와 비슷하고 일단 초기화하고 나면 값을 다시 할당할 수 없습니다.</li><li>위와 같이 String은 + 연산자로 이어붙일 수 있습니다.</li><li>var 대신 val을 사용하는 것이 코드를 더 가독성 높고 리팩토링 하기 쉽게 해준다(by 마틴 오더스키)</li></ul><h4 id="3-문자열-인터폴레이션"><a href="#3-문자열-인터폴레이션" class="headerlink" title="3. 문자열 인터폴레이션"></a>3. 문자열 인터폴레이션</h4><ul><li><p>3번째 라인 <code>s&quot;$dan ...&quot;</code>구문은 문자열 인터폴레이션입니다.</p></li><li><p>문자열을 시작하는 따옴표 직전에 <strong>s</strong>라는 문자가 오는 경우 scala는 해당 리터럴을 처리하기 위해 <strong>s 문자열 인터폴레이션</strong>을 사용합니다.</p></li><li><p>s 인터폴레이터는 내장된 각 표현식을 평가하고, 각 결과에 대해 toString을 호출한 다음 내장된 표현식을 toString의 결과로 대치해줍니다.</p></li><li><p><code>${6 * 7}</code>과 같이 <code>$</code> 뒤에 원하는 표현식을 사용할 수 있습니다.</p></li><li><p>scala는 s 인터폴레이터 외에 raw 인터폴레이터, f 인터폴레이터를 제공합니다.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">println(<span class="string">raw"No\\\\escape"</span>)</div><div class="line"><span class="comment">//--&gt; 출력 : No\\\\escape!</span></div><div class="line"></div><div class="line"><span class="keyword">val</span> pi = <span class="string">"Pi"</span></div><div class="line">println(<span class="string">f"<span class="subst">$pi</span> is approximately <span class="subst">$&#123;math.Pi&#125;</span>%.8f"</span>)</div><div class="line"><span class="comment">//--&gt; 출력 : Pi is approximately 3.14159265.</span></div></pre></td></tr></table></figure><p>​</p></li></ul><h4 id="4-if-구문"><a href="#4-if-구문" class="headerlink" title="4. if 구문"></a>4. if 구문</h4><ul><li>12라인은 if 구문과 문자열을 +로 이어붙이는 구문입니다.</li><li>scala의 제어 구문은 대부분 어떤 값을 내놓으며, if 문도 마찬가지입니다.</li><li>C, C++, Java의 삼항연산자(?:)와 같이 삼항 연산자 모델을 채용하되, 삼항 연산자와 if를 합쳐서 if 구문으로만 사용합니다.</li></ul><h4 id="5-for-표현식"><a href="#5-for-표현식" class="headerlink" title="5. for 표현식"></a>5. for 표현식</h4><ul><li><p>7~13 라인의 <code>for {} yield {}</code>는 for 표현식입니다.</p></li><li><p>scala에서는 <u>제너레이터</u>라고 부르는 문법(<code>file &lt;- fileCollection</code>와 같은 형태)을 이용해 컬렉션을 이터레이션합니다. </p></li><li><p>for 표현식에서는 이터레이션 구문 뒤에 if절을 넣어서 filter를 추가(다중 if도 가능)할 수 있습니다. </p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(</div><div class="line">  file &lt;- fileCollection</div><div class="line">  <span class="keyword">if</span> file.isFile</div><div class="line">  <span class="keyword">if</span> file.getName.endsWith(<span class="string">".scala"</span>)</div><div class="line">) println(file)</div></pre></td></tr></table></figure></li><li><p>여러 개의 제너레이터를 사용하면 for문은 중첩 이터레이션을 수행 합니다.</p></li><li><p>괄호 대신 중괄호를 사용해 제너레이터와 필터를 감싸도 동일하게 사용 가능합니다.</p></li><li><p><code>for (이터레이션) yield {본문}</code> 표현식을 사용하여 본문의 값을 배열로 반환할 수 있습니다.</p></li></ul><h4 id="6-toString-mkString"><a href="#6-toString-mkString" class="headerlink" title="6. toString, mkString"></a>6. toString, mkString</h4><ul><li>2라인의 <code>toString</code> 연산자는 해당 객체에 대한 표준 문자열 표현을 반환합니다.</li><li>다른 표현을 원한다면 <code>mkString</code> 메소드를 사용할 수 있습니다. 15라인의 <code>배열.mkString(&quot;\n&quot;)</code>은 배열의 각 원소를 개행문자로 연결하여 반환합니다.</li></ul><h3 id="참고문헌"><a href="#참고문헌" class="headerlink" title="참고문헌"></a>참고문헌</h3><p>Programming in Scala 3/e Updated for Scala 2.12 (2017, 에이콘 출판사)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;프로젝트에서 사용할 수 있다는 이유 때문에 최근 Scala를 공부하고 있습니다. &lt;/p&gt;
&lt;p&gt;지금까지 써본 개발 언어는 ASP, PHP 같은 스크립트 언어(&lt;del&gt;나이가 탄로나나요.. 쿨럭&lt;/del&gt;), 비교적 최근에 썼던 언어로는 Java,
      
    
    </summary>
    
      <category term="Application" scheme="https://kalipso.github.io/categories/Application/"/>
    
      <category term="Scala" scheme="https://kalipso.github.io/categories/Application/Scala/"/>
    
    
      <category term="scala 기초" scheme="https://kalipso.github.io/tags/scala-%EA%B8%B0%EC%B4%88/"/>
    
      <category term="함수형 프로그래밍" scheme="https://kalipso.github.io/tags/%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/"/>
    
      <category term="구구단" scheme="https://kalipso.github.io/tags/%EA%B5%AC%EA%B5%AC%EB%8B%A8/"/>
    
  </entry>
  
  <entry>
    <title>Apache Kudu의 특징과 테이블 관리</title>
    <link href="https://kalipso.github.io/2017/11/09/About-Apache-Kudu/"/>
    <id>https://kalipso.github.io/2017/11/09/About-Apache-Kudu/</id>
    <published>2017-11-09T08:20:21.000Z</published>
    <updated>2017-11-09T08:21:43.122Z</updated>
    
    <content type="html"><![CDATA[<p>프로젝트에서 Kudu를 쓸 기회가 생겨서 간단하게 특징을 정리해보기로 하겠습니다. Cloudera 위에서 Kudu-Impala를 약간 써본 관계로, 전체적인 내용보다는 특징적인 부분만을 정리해보려고 합니다. </p><p><img src="http://farm5.staticflickr.com/4582/37564317094_09c44cdb22_b.jpg" alt=""></p><h2 id="Kudu의-특징"><a href="#Kudu의-특징" class="headerlink" title="# Kudu의 특징"></a># Kudu의 특징</h2><ul><li>Apache Hadoop 플랫폼 환경에서 사용되는 <strong>Columnar 스토리지 엔진</strong>이다.    <ul><li>데이터웨어하우징 워크로드에서 유리함</li></ul></li><li>MapReduce, Spark 및 기타 Hadoop ecosystem 컴포넌트와 통합된다.</li><li>엄격한 직렬화 일관성을 포함하여 일관성 유지를 위한 다양한 옵션을 제공한다.</li><li>Raft Consensus 알고리즘을 사용하여 높은 가용성을 유지한다. 반수 이상의 Replica가 Available하다면 Tablet Server는 Read/Write를 수행할 수 있다.</li><li>구조화된 모델(Structured Data Model)</li></ul><h2 id="Kudu의-구조"><a href="#Kudu의-구조" class="headerlink" title="# Kudu의 구조"></a># Kudu의 구조</h2><ul><li><p><strong>Table</strong> : 데이터가 저장되는 공간. Table은 Schema 정렬된 Primary Key를 가진다. Table은 Tablet이라는 세그먼트로 분할된다.</p></li><li><p><strong>Tablet</strong> : Table의 연속 세그먼트. Tablet은 여러 Tablet Server에 ReplicaSet를 구성함</p></li><li><p><strong>Tablet Server</strong> : Tablet을 저장하고 클라이언트에 저장하는 역할을 한다. Raft Consensus 알고리즘을 사용하여 리더를 선출하고 읽기 혹은 쓰기 요청을 처리한다.</p></li><li><p><strong>Master</strong> : Tablet, Tablet Server, Catalog Table 및 클러스터와 관련한 Metadata를 가진다. 현재 Leader가 사라지면 Raft Consensus 알고리즘을 이용하여 새로운 Master가 선출된다.<br>또한 Master는 새로운 Table에 대한 metadata를 Catalog Table에 쓰거나 Tablet Server들에 Tablet을 생성하는 프로세스를 조정하는 등의 metadata 오퍼레이션을 수행한다.  </p><p>Table Server들은 셋팅된 Interval에 따라 Master에 heartbeat를 전송한다.</p></li></ul><p><img src="https://kudu.apache.org/docs/images/kudu-architecture-2.png" alt="3개의 Master가 있는 Kudu 클러스터"></p><h2 id="Kudu-Impala-테이블-생성"><a href="#Kudu-Impala-테이블-생성" class="headerlink" title="# Kudu-Impala 테이블 생성"></a># Kudu-Impala 테이블 생성</h2><h4 id="Internal-amp-External-Impala-Table"><a href="#Internal-amp-External-Impala-Table" class="headerlink" title="Internal &amp; External Impala Table"></a>Internal &amp; External Impala Table</h4><ul><li><p><strong>Internal</strong> : </p><ul><li>Impala에 의해 관리되며 </li><li>Impala에서 삭제하면 데이터와 테이블이 완전 삭제됨. </li><li>Impala를 사용하여 새 테이블을 만들면 일반적으로 내부 테이블</li></ul></li><li><p><strong>External</strong> : </p><ul><li><p>Create External Table로 생성할 수 있으며</p></li><li><p>테이블을 삭제해도 Kudu에서 테이블이 삭제되지 않고, Impala와 Kudu 간 매핑만 제거함.</p></li><li><p>Kudu API 또는 Apache Spark 등에서 만들었을 경우 Impala에서 자동으로 표시되지 않기 때문에, 먼저 Impala에서 External 테이블을 만들어 Kudu 테이블과 Impala 데이터베이스를 매핑해야 함.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">EXTERNAL</span> <span class="keyword">TABLE</span> my_mapping_table</div><div class="line"><span class="keyword">STORED</span> <span class="keyword">AS</span> KUDU</div><div class="line">TBLPROPERTIES (</div><div class="line">  <span class="string">'kudu.table_name'</span> = <span class="string">'my_kudu_table'</span></div><div class="line">);</div></pre></td></tr></table></figure></li></ul></li></ul><h4 id="Impala에서-새로운-Kudu-테이블-만들기"><a href="#Impala에서-새로운-Kudu-테이블-만들기" class="headerlink" title="Impala에서 새로운 Kudu 테이블 만들기"></a>Impala에서 새로운 Kudu 테이블 만들기</h4><ul><li><p><strong>테이블 생성</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--일반적인 생성구문</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> my_first_table</div><div class="line">(</div><div class="line">  <span class="keyword">id</span> <span class="built_in">BIGINT</span>,</div><div class="line">  <span class="keyword">name</span> <span class="keyword">STRING</span>,</div><div class="line">  PRIMARY <span class="keyword">KEY</span>(<span class="keyword">id</span>)</div><div class="line">)</div><div class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="keyword">HASH</span> <span class="keyword">PARTITIONS</span> <span class="number">16</span></div><div class="line"><span class="keyword">STORED</span> <span class="keyword">AS</span> KUDU;</div><div class="line"></div><div class="line"><span class="comment">-- CTAS</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> new_table</div><div class="line">PRIMARY <span class="keyword">KEY</span> (ts, <span class="keyword">name</span>)</div><div class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="keyword">HASH</span>(<span class="keyword">name</span>) <span class="keyword">PARTITIONS</span> <span class="number">8</span></div><div class="line"><span class="keyword">STORED</span> <span class="keyword">AS</span> KUDU</div><div class="line"><span class="keyword">AS</span> <span class="keyword">SELECT</span> ts, <span class="keyword">name</span>, <span class="keyword">value</span> <span class="keyword">FROM</span> old_table;</div></pre></td></tr></table></figure><p>※ Kudu는 현재 (2017.11) 자동/수동 Sharding 매커니즘이 없기 때문에, 테이블을 만들 때 <code>partition by</code> 절을 이용하여 분할 Key를 지정해야 한다.</p><p>​</p></li></ul><h4 id="파티션-설정"><a href="#파티션-설정" class="headerlink" title="파티션 설정"></a>파티션 설정</h4><ul><li><p><code>PARTITION BY RANGE</code> : 범위 파티션을 지정할 수 있으며, 아래와 같이 사용함.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> cust_behavior (</div><div class="line">  _id <span class="built_in">BIGINT</span> PRIMARY <span class="keyword">KEY</span>,</div><div class="line">  salary <span class="keyword">STRING</span>,</div><div class="line">  edu_level <span class="built_in">INT</span>,</div><div class="line">  usergender <span class="keyword">STRING</span>,</div><div class="line">  <span class="string">`group`</span> <span class="keyword">STRING</span>,</div><div class="line">  city <span class="keyword">STRING</span>,</div><div class="line">  postcode <span class="keyword">STRING</span>,</div><div class="line">  last_purchase_price <span class="built_in">FLOAT</span>,</div><div class="line">  last_purchase_date <span class="built_in">BIGINT</span>,</div><div class="line">  <span class="keyword">category</span> <span class="keyword">STRING</span>,</div><div class="line">  sku <span class="keyword">STRING</span>,</div><div class="line">  rating <span class="built_in">INT</span>,</div><div class="line">  fulfilled_date <span class="built_in">BIGINT</span></div><div class="line">)</div><div class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="keyword">RANGE</span> (_id)</div><div class="line">(</div><div class="line">    <span class="keyword">PARTITION</span> <span class="keyword">VALUES</span> &lt; <span class="number">1439560049342</span>,</div><div class="line">    <span class="keyword">PARTITION</span> <span class="number">1439560049342</span> &lt;= <span class="keyword">VALUES</span> &lt; <span class="number">1439566253755</span>,</div><div class="line">    <span class="keyword">PARTITION</span> <span class="number">1439566253755</span> &lt;= <span class="keyword">VALUES</span> &lt; <span class="number">1439572458168</span>,</div><div class="line">    <span class="keyword">PARTITION</span> <span class="number">1439572458168</span> &lt;= <span class="keyword">VALUES</span> &lt; <span class="number">1439578662581</span>,</div><div class="line">    <span class="keyword">PARTITION</span> <span class="number">1439578662581</span> &lt;= <span class="keyword">VALUES</span> &lt; <span class="number">1439584866994</span>,</div><div class="line">    <span class="keyword">PARTITION</span> <span class="number">1439584866994</span> &lt;= <span class="keyword">VALUES</span> &lt; <span class="number">1439591071407</span>,</div><div class="line">    <span class="keyword">PARTITION</span> <span class="number">1439591071407</span> &lt;= <span class="keyword">VALUES</span></div><div class="line">)</div><div class="line"><span class="keyword">STORED</span> <span class="keyword">AS</span> KUDU;</div></pre></td></tr></table></figure></li><li><p><code>PARTITION BY HASH</code> : HASH 값으로 파티셔닝하며, column을 지정하지 않으면 모든 기본 키 열을 해싱하여 원하는 수의 버킷을 생성할 수 있다.</p><blockquote><p>값이 단조롭게 증가하는 열에서 범위별로 파티션을 나누면 마지막 Tablet이 다른 테이블보다 훨씬 커지므로 주의할 것.</p></blockquote></li><li><p><code>PARTITION BY HASH</code> and <code>RANGE</code> : 다음과 같은 형태로 복합 파티션 키를 설정할 수 있음.</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> cust_behavior (</div><div class="line">  <span class="keyword">id</span> <span class="built_in">BIGINT</span>,</div><div class="line">  sku <span class="keyword">STRING</span>,</div><div class="line">  salary <span class="keyword">STRING</span>,</div><div class="line">  edu_level <span class="built_in">INT</span>,</div><div class="line">  usergender <span class="keyword">STRING</span>,</div><div class="line">  <span class="string">`group`</span> <span class="keyword">STRING</span>,</div><div class="line">  city <span class="keyword">STRING</span>,</div><div class="line">  postcode <span class="keyword">STRING</span>,</div><div class="line">  last_purchase_price <span class="built_in">FLOAT</span>,</div><div class="line">  last_purchase_date <span class="built_in">BIGINT</span>,</div><div class="line">  <span class="keyword">category</span> <span class="keyword">STRING</span>,</div><div class="line">  rating <span class="built_in">INT</span>,</div><div class="line">  fulfilled_date <span class="built_in">BIGINT</span>,</div><div class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="keyword">id</span>, sku)</div><div class="line">)</div><div class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="keyword">HASH</span> (<span class="keyword">id</span>) <span class="keyword">PARTITIONS</span> <span class="number">4</span>,</div><div class="line"><span class="keyword">RANGE</span> (sku)</div><div class="line">(</div><div class="line">  <span class="keyword">PARTITION</span> <span class="keyword">VALUES</span> &lt; <span class="string">'g'</span>,</div><div class="line">  <span class="keyword">PARTITION</span> <span class="string">'g'</span> &lt;= <span class="keyword">VALUES</span> &lt; <span class="string">'o'</span>,</div><div class="line">  <span class="keyword">PARTITION</span> <span class="string">'o'</span> &lt;= <span class="keyword">VALUES</span> &lt; <span class="string">'u'</span>,</div><div class="line">  <span class="keyword">PARTITION</span> <span class="string">'u'</span> &lt;= <span class="keyword">VALUES</span></div><div class="line">)</div><div class="line"><span class="keyword">STORED</span> <span class="keyword">AS</span> KUDU;</div></pre></td></tr></table></figure></li><li><p>Non-Covering Range Partitions : Kudu 1.0 이상에서 다음과 같은 Range 파티션을 만들 수 있다. </p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> sales_by_year (</div><div class="line">  <span class="keyword">year</span> <span class="built_in">INT</span>, sale_id <span class="built_in">INT</span>, amount <span class="built_in">INT</span>,</div><div class="line">  PRIMARY <span class="keyword">KEY</span> (sale_id, <span class="keyword">year</span>)</div><div class="line">)</div><div class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="keyword">RANGE</span> (<span class="keyword">year</span>) (</div><div class="line">  <span class="keyword">PARTITION</span> <span class="keyword">VALUE</span> = <span class="number">2012</span>,</div><div class="line">  <span class="keyword">PARTITION</span> <span class="keyword">VALUE</span> = <span class="number">2013</span>,</div><div class="line">  <span class="keyword">PARTITION</span> <span class="keyword">VALUE</span> = <span class="number">2014</span>,</div><div class="line">  <span class="keyword">PARTITION</span> <span class="keyword">VALUE</span> = <span class="number">2015</span>,</div><div class="line">  <span class="keyword">PARTITION</span> <span class="keyword">VALUE</span> = <span class="number">2016</span></div><div class="line">)</div><div class="line"><span class="keyword">STORED</span> <span class="keyword">AS</span> KUDU;</div></pre></td></tr></table></figure><p>  이 테이블은 2017이 되면 입력이 거부되기 때문에, 다음과 같이 range가 추가되어야 한다.</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> sales_by_year <span class="keyword">ADD</span> <span class="keyword">RANGE</span> <span class="keyword">PARTITION</span> <span class="keyword">VALUE</span> = <span class="number">2017</span>;</div></pre></td></tr></table></figure><p>  마찬가지로, range partition은 drop될 수 있다.</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> sales_by_year <span class="keyword">ADD</span> <span class="keyword">RANGE</span> <span class="keyword">PARTITION</span> <span class="keyword">VALUE</span> = <span class="number">2017</span>;</div></pre></td></tr></table></figure></li></ul><h4 id="테이블-속성-변경"><a href="#테이블-속성-변경" class="headerlink" title="테이블 속성 변경"></a>테이블 속성 변경</h4><ul><li><p>Internal 테이블인 경우, <code>kudu.table_name</code>속성을 변경하여 기본 Kudu 테이블 이름 변경</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> my_internal_table</div><div class="line"><span class="keyword">SET</span> TBLPROPERTIES(<span class="string">'kudu.table_name'</span> = <span class="string">'new_name'</span>)</div></pre></td></tr></table></figure></li><li><p>다른 응용 프로그램이 Impala에서 Kudu 테이블의 이름을 바꾼 경우 외부 테이블 다시 매핑</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> my_external_table_</div><div class="line"><span class="keyword">SET</span> TBLPROPERTIES(<span class="string">'kudu.table_name'</span> = <span class="string">'some_other_kudu_table'</span>)</div></pre></td></tr></table></figure></li><li><p>Kudu Master 주소 변경</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> my_table</div><div class="line"><span class="keyword">SET</span> TBLPROPERTIES(<span class="string">'kudu.master_addresses'</span> = <span class="string">'kudu-new-master.example.com:7051'</span>);</div></pre></td></tr></table></figure></li><li><p>Internal -&gt; External로 변경</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> my_table <span class="keyword">SET</span> TBLPROPERTIES(<span class="string">'EXTERNAL'</span> = <span class="string">'TRUE'</span>);</div></pre></td></tr></table></figure><p>​## 참고</p></li></ul><hr><p>Introducing Apache Kudu(<a href="https://kudu.apache.org/docs/" target="_blank" rel="external">https://kudu.apache.org/docs/</a>)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;프로젝트에서 Kudu를 쓸 기회가 생겨서 간단하게 특징을 정리해보기로 하겠습니다. Cloudera 위에서 Kudu-Impala를 약간 써본 관계로, 전체적인 내용보다는 특징적인 부분만을 정리해보려고 합니다. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;htt
      
    
    </summary>
    
      <category term="Database" scheme="https://kalipso.github.io/categories/Database/"/>
    
      <category term="kudu" scheme="https://kalipso.github.io/categories/Database/kudu/"/>
    
    
      <category term="kudu" scheme="https://kalipso.github.io/tags/kudu/"/>
    
      <category term="hadoop" scheme="https://kalipso.github.io/tags/hadoop/"/>
    
      <category term="kudu-impala" scheme="https://kalipso.github.io/tags/kudu-impala/"/>
    
      <category term="kudu partition" scheme="https://kalipso.github.io/tags/kudu-partition/"/>
    
  </entry>
  
  <entry>
    <title>Github Page에 Hexo 블로그 만들기</title>
    <link href="https://kalipso.github.io/2017/11/08/how-to-make-hexo-blog-on-github-page/"/>
    <id>https://kalipso.github.io/2017/11/08/how-to-make-hexo-blog-on-github-page/</id>
    <published>2017-11-08T08:02:10.000Z</published>
    <updated>2017-11-09T08:27:21.561Z</updated>
    
    <content type="html"><![CDATA[<h2 id="프롤로그"><a href="#프롤로그" class="headerlink" title="프롤로그"></a>프롤로그</h2><p>올해 여름, 11개월 프로젝트를 마치고 나와서 오랜만에 티스토리 블로그를 접속했더니 접속이 되지 않았습니다.</p><p>다음 고객센터를 페이지를 통해서 티스토리 담당자랑 한참 실갱이를 했는데, 누군가 해킹을 해서 내 블로그와 글을 모두 삭제하였고, 해당 블로그는 결국 살릴 수 없다고 합니다. 쿠궁 ㅠㅠ</p><p>가끔씩 써오기는 했지만 나름 10년을 써왔던 블로그인데 한순간에 날아가버린 거죠.. 이렇게 허무할 수가..</p><p>눈물을 머금고 블로그 선택에 대한 포스팅(<a href="http://blog.kalkin7.com/2015/07/07/maintain-a-blog-for-a-long-time/" target="_blank" rel="external">내 글을 오래 남기기 위한 블로그 선택</a>)들을 찾아보다가 GitHub Page에서 Hexo를 이용해 블로그를 구축하는 방법을 선택하였는데, 선택의 주된 이유를 정리해보면 이렇습니다.</p><ul><li>변경 자유도가 높다.</li><li>보안 및 컨텐츠 유실로부터 비교적 안전하다. <ul><li>web환경에서 로그인 및 권한획득 과정이 없음. </li><li>기본적으로 PC에서 소스를 관리함. </li><li>GitHub를 통해 버전 관리가 가능함. </li></ul></li><li>모든 기능을 제한없이 무료로 사용할 수 있다. </li><li>Jekyll과 Hexo를 비교한 결과, Hexo가 더 예쁘다.</li></ul><p><img src="https://farm5.staticflickr.com/4573/38204775206_4a6d29f021_m.jpg" alt=""></p><blockquote><p>A fast, simple &amp; powerful blog framework</p></blockquote><p>약간의 삽질을 통해 Hexo 블로그를 만들게 되었는데, 그 과정을 아래에 기록합니다.</p><h2 id="GitHub으로-정적-페이지-생성하기"><a href="#GitHub으로-정적-페이지-생성하기" class="headerlink" title="# GitHub으로 정적 페이지 생성하기"></a># GitHub으로 정적 페이지 생성하기</h2><p>GitHub에서는 Repository를 생성하여 정적 페이지를 서비스할 수 있는 기능을 제공합니다.</p><h4 id="1-Repository-생성"><a href="#1-Repository-생성" class="headerlink" title="1. Repository 생성"></a>1. Repository 생성</h4><p>GitHub에서 “New Repository” 선택 후 Repository Name, Description 등 입력하고 Repository을 생성합니다.</p><p><img src="http://farm5.staticflickr.com/4562/24387340028_fc8d18364f_b.jpg" alt=""> </p><p>※ Add License 등 옵션은 선택하지 않음</p><h4 id="2-Clone-then-Repository"><a href="#2-Clone-then-Repository" class="headerlink" title="2. Clone then Repository"></a>2. Clone then Repository</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#1. Repository를 "pub"저장소로 clone</span></div><div class="line">d:\blog&gt; git <span class="built_in">clone</span> https://github.com/username/username.github.io.git pub</div><div class="line">Cloning into <span class="string">'pub'</span>...</div><div class="line">warning: You appear to have cloned an empty repository.</div></pre></td></tr></table></figure><h4 id="3-Hello-world-서비스-테스트"><a href="#3-Hello-world-서비스-테스트" class="headerlink" title="3. Hello world 서비스 테스트"></a>3. Hello world 서비스 테스트</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#2. index.html 생성</span></div><div class="line">d:\blog&gt; <span class="built_in">cd</span> pub</div><div class="line">d:\blog\pub&gt; <span class="built_in">echo</span> <span class="string">"Hello World"</span> &gt; index.html</div><div class="line"></div><div class="line"><span class="comment">#. Remote 저장소에 변경내역 Push</span></div><div class="line">d:\blog\pub&gt; git add --all</div><div class="line">d:\blog\pub&gt; git commit -m <span class="string">"Initial commit"</span></div><div class="line">d:\blog\pub&gt; git push -u origin maser</div></pre></td></tr></table></figure><h4 id="4-접속확인"><a href="#4-접속확인" class="headerlink" title="4. 접속확인"></a>4. 접속확인</h4><p>페이지 접속 확인 브라우저에서 Repository name으로 접속하여 접속 확인<br>※ 위에서 pub 폴더는 서비스용이 아니고 테스트 용도입니다.</p><h2 id="Hexo-설치"><a href="#Hexo-설치" class="headerlink" title="# Hexo 설치"></a># Hexo 설치</h2><h4 id="1-사전설치"><a href="#1-사전설치" class="headerlink" title="1. 사전설치"></a>1. 사전설치</h4><p>설치 전 준비 Hexo를 이용하기 위해서는 다음 구성요소들이 사전에 설치되어 있어야 합니다.</p><ul><li><a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a> </li><li><a href="https://git-scm.com/" target="_blank" rel="external">Git</a></li></ul><h4 id="2-Hexo-Client-및-저장소-설정"><a href="#2-Hexo-Client-및-저장소-설정" class="headerlink" title="2. Hexo Client 및 저장소 설정"></a>2. Hexo Client 및 저장소 설정</h4><p>npm을 이용하여 Hexo Client를 설치하고 저장소를 설정합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#1. hexo client 설치</span></div><div class="line">D:\blog&gt; npm install hexo-cli-g</div><div class="line"></div><div class="line"><span class="comment">#2. hexo 저장소 생성 및 설치</span></div><div class="line">D:\blog&gt; hexo init src</div><div class="line">D:\blog&gt; <span class="built_in">cd</span> src</div><div class="line">D:\blog\src&gt; npm install</div></pre></td></tr></table></figure><h4 id="3-config-yml-파일-설정"><a href="#3-config-yml-파일-설정" class="headerlink" title="3. _config.yml 파일 설정"></a>3. _config.yml 파일 설정</h4><p>hexo의 기본정보를 셋팅합니다. “Plugins”의 첫번째 문자가 대문자임에 유의하세요. (<del>저처럼 3일 동안 삽질할 수 있습니다</del>)</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Site</span></div><div class="line"><span class="comment"># language를 ko로 만들면 Home &gt; 홈으로 나오는 등의 부작용</span></div><div class="line"><span class="attr">title:</span> <span class="string">낭만디비술사</span></div><div class="line"><span class="attr">subtitle:</span></div><div class="line"><span class="attr">description:</span></div><div class="line"><span class="attr">author:</span> <span class="string">kalipso</span></div><div class="line"><span class="attr">language:</span> <span class="string">en</span></div><div class="line"><span class="attr">timezone:</span> <span class="string">Asia/Seoul</span></div><div class="line"></div><div class="line"><span class="string">...</span> <span class="string">중략</span> <span class="string">...</span></div><div class="line"></div><div class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></div><div class="line"><span class="attr">Plugins:</span></div><div class="line"><span class="bullet">-</span> <span class="string">hexo-deployer-git</span></div><div class="line"></div><div class="line"><span class="string">...</span> <span class="string">중략</span> <span class="string">...</span></div><div class="line"></div><div class="line"><span class="comment"># Deployment</span></div><div class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></div><div class="line"><span class="attr">deploy:</span></div><div class="line"><span class="attr">  type:</span> <span class="string">git</span></div><div class="line"><span class="attr">  repo:</span> <span class="attr">https://github.com/username/username.github.io.git</span></div></pre></td></tr></table></figure><h4 id="4-Hexo-로컬-서버에서-확인"><a href="#4-Hexo-로컬-서버에서-확인" class="headerlink" title="4. Hexo 로컬 서버에서 확인"></a>4. Hexo 로컬 서버에서 확인</h4><p>로컬 서버를 만들고 확인할 수 있습니다. 기본적으로 로컬 페이지는 포트 4000입니다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># server 설치</span></div><div class="line">D:\blog\src&gt;npm install hexo-server --save</div><div class="line"></div><div class="line"><span class="comment"># 서버 구동</span></div><div class="line">D:\blog\src&gt;hexo server</div></pre></td></tr></table></figure></p><p>   <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> 에서 확인 가능</p><h4 id="5-GitHub에-Deploy"><a href="#5-GitHub에-Deploy" class="headerlink" title="5. GitHub에 Deploy"></a>5. GitHub에 Deploy</h4><p>아래에서 hexo-deployer-git은 _config.yml에 정의되어 있기 때문에, server를 구동하기 전에 먼저 설치되어야 합니다.<br>아래 명령을 통해 간단하게 Github에 Deploy할 수 있습니다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># deployer 설치</div><div class="line">D:\blog\src&gt;npm install hexo-deployer-git --save</div><div class="line"></div><div class="line"># generate 및 github-deploy</div><div class="line">D:\blog\src&gt;hexo deploy --generate</div></pre></td></tr></table></figure></p><p>   <a href="http://username.github.io" target="_blank" rel="external">http://username.github.io</a> 에 deploy 완료. </p><h2 id="Theme-적용하기"><a href="#Theme-적용하기" class="headerlink" title="# Theme 적용하기"></a># Theme 적용하기</h2><p><a href="https://hexo.io/themes/" target="_blank" rel="external">https://hexo.io/themes/</a> 에 접속해서 Hexo에서 사용할 수 있는 여러가지 Theme를 확인하고 선택할 수 있습니다.<br>저는 많은 블로그들이 사용하고 있는 hueman(<a href="https://github.com/ppoffice/hexo-theme-hueman/wiki/Installation" target="_blank" rel="external">https://github.com/ppoffice/hexo-theme-hueman/wiki/Installation</a>) 을 사용했습니다. (중국어로 된 테마도 많은데, 언어 문제로 포기..)</p><p>대부분의 Theme가 sample 페이지와 Installation 문서를 포함한 Github 페이지를 제공하고 있기 때문에 설치가 어렵지 않습니다.<br>다만, 로컬에서 Server 재시작에도 변경사항이 제대로 반영되지 않을때, clean 명령을 통해 저장소를 초기화할 수 있습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">D:\blog\src&gt; hexo clean</div><div class="line">D:\blog\src&gt; hexo server</div></pre></td></tr></table></figure><h2 id="백업-설정"><a href="#백업-설정" class="headerlink" title="# 백업 설정"></a># 백업 설정</h2><p>Jekyll과 달리 Hexo는 각 변경사항이 모두 Git으로 버전관리가 되지 않기 때문에, 유실에 대비하여 GitHub에 Repository(<a href="https://github.com/username/blog-source.git" target="_blank" rel="external">https://github.com/username/blog-source.git</a>) 를 만들고 관리하는 것으로 설정하였다.</p><h2 id="1-Hexo-저장소-git에-관리"><a href="#1-Hexo-저장소-git에-관리" class="headerlink" title="1. Hexo 저장소 git에 관리"></a>1. Hexo 저장소 git에 관리</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># git 저장소로 만들고 커밋</span></div><div class="line">D:\blog\src&gt; git init</div><div class="line">D:\blog\src&gt; git add --all</div><div class="line">D:\blog\src&gt; git commit -m <span class="string">"initial commit"</span></div><div class="line">D:\blog\src&gt; git remote add origin https://github.com/username/blog-source.git</div><div class="line">D:\blog\src&gt; git push origin master</div></pre></td></tr></table></figure><h2 id="2-배치파일-생성"><a href="#2-배치파일-생성" class="headerlink" title="2. 배치파일 생성"></a>2. 배치파일 생성</h2><p>반영시마다 Hexo 저장소를 commit하고 반영하는 배치파일 생성<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># hexoCommit.bat 파일 생성</span></div><div class="line"></div><div class="line">D:\blog\src&gt; copy con hexoCommit.bat</div><div class="line"><span class="built_in">cd</span> D:\blog\src</div><div class="line">git add --all</div><div class="line">git commit -m <span class="string">"블로그 소스 반영(%date%)"</span></div><div class="line">git push -u origin master</div><div class="line">hexo deploy --generate</div><div class="line"></div><div class="line"><span class="comment"># Ctrl + Z (저장)</span></div></pre></td></tr></table></figure></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><hr><ul><li>Github Pages와 Hexo를 통해 30분만에 기술 블로그 만들기(<a href="https://www.holaxprogramming.com/2017/04/16/github-page-and-hexo/" target="_blank" rel="external">https://www.holaxprogramming.com/2017/04/16/github-page-and-hexo/</a>)</li><li>워드프레스보다 쉬운 Hexo 블로그 시작하기(<a href="http://futurecreator.github.io/2016/06/14/get-started-with-hexo/" target="_blank" rel="external">http://futurecreator.github.io/2016/06/14/get-started-with-hexo/</a>)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;프롤로그&quot;&gt;&lt;a href=&quot;#프롤로그&quot; class=&quot;headerlink&quot; title=&quot;프롤로그&quot;&gt;&lt;/a&gt;프롤로그&lt;/h2&gt;&lt;p&gt;올해 여름, 11개월 프로젝트를 마치고 나와서 오랜만에 티스토리 블로그를 접속했더니 접속이 되지 않았습니다.&lt;/
      
    
    </summary>
    
      <category term="Application" scheme="https://kalipso.github.io/categories/Application/"/>
    
      <category term="Hexo" scheme="https://kalipso.github.io/categories/Application/Hexo/"/>
    
    
      <category term="hexo" scheme="https://kalipso.github.io/tags/hexo/"/>
    
      <category term="블로그 만들기" scheme="https://kalipso.github.io/tags/%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0/"/>
    
      <category term="github" scheme="https://kalipso.github.io/tags/github/"/>
    
  </entry>
  
</feed>
